<?xml version="1.0" encoding="UTF-8"?>
<project name="jbilling" basedir=".">

    <property file="build.properties"/>
    <property environment="env"/>

    <condition property="grails.home" value="${env.GRAILS_HOME}">
        <isset property="env.GRAILS_HOME"/>
    </condition>

    <path id="compile.classpath">
        <!-- jbilling libraries -->
        <fileset dir="${source.lib.dir}">
            <include name="*.jar"/>
        </fileset>

        <!-- grails libraries-->
        <fileset dir="${env.GRAILS_HOME}/lib/" includes="*.jar"/>
        <fileset dir="${env.GRAILS_HOME}/dist/" includes="*.jar"/>
    </path>
        
    <path id="test.classpath">
        <!-- test classes and junit -->
        <pathelement location="${build.test.dir}"/>
        <pathelement location="${junit.dir}/junit.jar"/>
        <fileset dir="${easymock.dir}" includes="*.jar"/>

        <!-- required dependencies -->
        <fileset dir="${digester.dir}" includes="*.jar"/>
        <fileset dir="${drools.dir}" includes="*.jar"/>
        <fileset dir="${velocity.dir}" includes="*.jar"/>
        <fileset dir="${quartz.dir}" includes="*.jar"/>
        <fileset dir="${spring.dir}" includes="*.jar"/>

        <!-- compiled jbilling classes -->
        <pathelement path="${build.classes.dir}"/>

        <!-- resource files -->
        <pathelement location="${source.java.dir}"/>
    </path>

    <path id="spring.classpath">
        <pathelement location="${source.spring.descriptor.dir}"/>
    </path>    

    
    <!--
         Testing targets
    -->

    <target name="test" depends="test-unit, test-ws, test-integration"/>

    <target name="test.init" depends="test.clean-results">
        <delete dir="${build.test.dir}"/>
        <mkdir dir="${build.test.dir}"/>
    </target>

    <target name="test.clean-results" unless="test-results.cleaned">
        <delete dir="${build.test-results.dir}"/>
        <property name="test-results.cleaned" value="true"/>
    </target>

    <target name="test-unit" depends="test.init" description="Run all class level unit tests and generate testing reports.">
        <javac srcdir="${source.test.dir}/unit"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <!-- jbilling properties for plug-in tests -->
        <copy file="${source.java.dir}/jbilling.properties" todir="${build.test.dir}"/>

        <!-- files for cache testing -->
        <copy file="${source.spring.descriptor.dir}/jbilling-caching.xml" todir="${build.test.dir}"/>
        <copy todir="${build.resources.dir}/mediation">
            <fileset dir="${source.mediation.descriptor.dir}" includes="RateCard.*"/>
        </copy>

        <!-- run unit tests -->
        <delete dir="${build.test-results.dir}/unit/"/>
        <mkdir dir="${build.test-results.dir}/unit/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>                                    

            <batchtest todir="${build.test-results.dir}/unit/xml">
                <formatter type="brief" usefile="false"/>
                <formatter type="xml"/>
                <fileset dir="${source.test.dir}/unit">
                    <!-- run specific unit tests with 'ant test-unit -Dtest=NameOfTest' -->
                    <include name="**/*Test*.java" unless="test"/>
                    <include name="**/${test}.java" if="test"/>
                    <exclude name="**/*Tester*.java"/>
                    <exclude name="**/*TestCase*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/unit/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/unit/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/unit/html"/>
        </junitreport>

        <fail if="test.failed" message="Unit tests failed! See log's for details."/>
    </target>

    <target name="test-ws" depends="test.init" description="Run all web service tests and generate testing reports.">
        <javac srcdir="${source.test.ws.dir}"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <copy file="${source.spring.descriptor.dir}/jbilling-remote-beans.xml" todir="${build.test.dir}"/>
        <copy todir="${build.resources.dir}/rules">
            <fileset dir="${source.rules.descriptor.dir}">
                <include name="rules-generator-config.xml"/>
                <include name="*.vm"/>
            </fileset>
        </copy>

        <!-- run web service tests -->
        <delete dir="${build.test-results.dir}/ws/"/>
        <mkdir dir="${build.test-results.dir}/ws/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="true">
            <jvmarg value="-Djava.security.manager" />
            <jvmarg value="-Djava.security.policy=${source.resources.descriptor.dir}/app.policy" />
            <jvmarg value="-Djava.security.auth.login.config=${source.resources.descriptor.dir}/auth.conf" />

            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>

            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>            

        	<test name="com.sapienter.jbilling.server.order.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.user.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.payment.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.item.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.invoice.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.pricing.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.pricing.strategy.WSTest" unless="test.class" todir="${build.test-results.dir}/ws/xml"/>

            <test name="${test.class}" if="test.class" todir="${build.test-results.dir}/ws/xml"/>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/ws/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/ws/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/ws/html"/>
        </junitreport>

        <fail if="test.failed" message="Web service tests failed! See log's for details."/>
    </target>

    <target name="test-integration" depends="test.init" description="Run all integration tests and generate testing reports.">
        <javac srcdir="${source.test.integration.dir}"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">

            <src path="${source.test.ws.dir}"/> <!-- todo: integration uses some support classes from ws tests, refactor -->
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <copy file="${source.spring.descriptor.dir}/jbilling-remote-beans.xml" todir="${build.test.dir}"/>

        <!-- for mediation tests -->
        <delete  dir="${build.resources.dir}/mediation"/>
        <mkdir dir="${build.resources.dir}/mediation"/>
        <mkdir dir="${build.resources.dir}/mediation/errors"/>

        <copy todir="${build.resources.dir}/mediation">
            <fileset dir="${source.mediation.descriptor.dir}" includes="mediation.dtd"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="asterisk.xml"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="asterisk-sample1.csv, mediation-batch-test.csv"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="jbilling_cdr.*"/>
        </copy>

        <copy todir="${build.resources.dir}/rules">
            <fileset dir="${source.rules.descriptor.dir}" includes="*.pkg"/>
        </copy>

        <!-- run integration tests -->
        <delete dir="${build.test-results.dir}/org-integration/"/>
        <mkdir dir="${build.test-results.dir}/org-integration/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="true">
            <jvmarg value="-Djava.security.manager" />
            <jvmarg value="-Djava.security.policy=${source.resources.descriptor.dir}/app.policy" />
            <jvmarg value="-Djava.security.auth.login.config=${source.resources.descriptor.dir}/auth.conf" />

            <sysproperty key="mediation.errors.dir" value="${build.resources.dir}/mediation/errors"/>

            <classpath refid="compile.classpath"/>
            <classpath refid="spring.classpath"/>            
            <classpath refid="test.classpath"/>

            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>

            <!--
                The tests need to run in a specific order (partners first). Don't use batchtest!
            <test name="com.sapienter.jbilling.server.user.PartnerTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            -->
            <test name="com.sapienter.jbilling.server.process.BillingProcessTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.mediation.MediationTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.provisioning.ProvisioningTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.process.AgeingTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>  
            
            <!-- explicitly run a single test case if 'test.class' was set -->
            <test name="${test.class}" if="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/org-integration/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/org-integration/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/org-integration/html"/>
        </junitreport>

        <fail if="test.failed" message="Integration tests failed! See log's for details."/>
    </target>

    <target name="test-mediation">
        <property name="test.class" value="com.sapienter.jbilling.server.mediation.MediationTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-provisioning">
        <property name="test.class" value="com.sapienter.jbilling.server.provisioning.ProvisioningTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-partners">
        <property name="test.class" value="com.sapienter.jbilling.server.user.PartnerTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-process">
        <property name="test.class" value="com.sapienter.jbilling.server.process.BillingProcessTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-ageing">
        <property name="test.class" value="com.sapienter.jbilling.server.process.AgeingTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-dynamic-balance">
        <property name="test.class" value="com.sapienter.jbilling.server.task.DynamicBalanceManagerTaskTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <!--
        jBilling "official" release generation targets
    -->

    <!-- todo: update for Grails app releases. Should generate a .war file along with our standard artifacts. -->

    <!--
         Warning: this task needs a lot of memory (at least 400MB), otherwise it fails with an obscure error.
         To fix set "ANT_OPTS=-Xmx400m -Xss128k"
    -->
    <target name="db">
        <!-- copy the schema files into torque dirs -->
        <copy todir="${torque.home.dir}/src/schema">
            <fileset dir="${source.torque.descriptor.dir}" includes="jbilling*"/>
        </copy>

        <!-- mysql -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="mysql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-mysql.sql"/>

        <!-- db2 -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="db2"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-db2.sql"/>

        <!-- hypersonic -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="hypersonic"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-hypersonic.sql"/>

        <!-- mssql -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="mssql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-mssql.sql"/>

        <!-- oracle -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="oracle"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-oracle.sql"/>

        <!-- postgresql -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="postgresql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-postgresql.sql"/>

        <!-- sybase -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="sybase"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-sybase.sql"/>

        <!-- jbilling base data -->
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="datasql"/>
        <copy file="${torque.home.dir}/src/jbilling-data.sql"
              todir="${image.source.dir}/jbilling/resources/db-samples"/>
    </target>


    <!--
        Utility targets
    -->

    <!--
         Generates rules using a velocity template file and a CSV of data given as task properties

         e.g., "ant generate-rules -DrulesTemplateFile=template.vm -DrulesDataFile=data.csv"
    -->
    <target name="generate-rules" description="Rules generation from velocity template and csv data file">
        <echo>Generating rules for input template ${rulesTemplateFile} and data file ${rulesDataFile}</echo>

        <!-- todo: where to put generated rules? -->
        <!-- Copy test Digester config and Velocity templates for generateRules API method. -->
        <copy todir="${build.resources.dir}/rules">
            <fileset dir="${source.rules.dir}">
                <include name="**/*.vm"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>        

        <!-- run the rules generator -->
        <java classname="com.sapienter.jbilling.tools.RulesGenerator" failonerror="true">
            <classpath>
                <path refid="compile.classpath"/>
                <fileset dir="${digester.dir}" includes="*.jar"/>
                <pathelement location="${build.classes.dir}"/>
            </classpath>
            <arg value="${source.rules.dir}/templates/${rulesTemplateFile}"/>
            <arg value="${source.rules.dir}/${rulesDataFile}"/>
        </java>

        <!-- delete velocity output log -->
        <delete>
            <fileset dir="${basedir}" includes="velocity.log*"/>
        </delete>
    </target>

</project>

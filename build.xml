<?xml version="1.0" encoding="UTF-8"?>
<project name="jbilling" default="setup" basedir=".">

    <property file="build.properties"/>
    <property environment="env"/>

    <condition property="grails.home" value="${env.GRAILS_HOME}">
        <isset property="env.GRAILS_HOME"/>
    </condition>

    <path id="compile.classpath">
        <!-- jbilling libraries -->
        <fileset dir="${source.lib.dir}">
            <include name="*.jar"/>
        </fileset>

        <!-- grails libraries-->
        <fileset dir="${env.GRAILS_HOME}/lib/">
            <include name="*.jar"/>
        </fileset>

    </path>
        
    <path id="test.classpath">
        <pathelement location="${build.test.dir}"/>
        <pathelement location="${junit.dir}/junit.jar"/>

        <fileset dir="${easymock.dir}">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="${drools.dir}">
            <include name="*.jar"/>
        </fileset>

        <!-- compiled jbilling classes -->
        <pathelement path="${build.classes.dir}"/>
    </path>

    <path id="spring.classpath">
        <pathelement location="${source.spring.descriptor.dir}"/>
    </path>    

    
    <!--
         Testing targets
    -->

    <target name="test" depends="prepare-test, test-unit, test-ws, test-integration"/>

    <target name="test.init">
        <delete dir="${build.test.dir}"/>
        <delete dir="${build.test-results.dir}"/>

        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${build.test-results.dir}"/>
    </target>

    <target name="test-unit" depends="test.init" description="Run all class level unit tests and generate testing reports.">
        <javac srcdir="${source.test.dir}/unit"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <!-- jbilling properties for plug-in tests -->
        <copy file="${source.java.dir}/jbilling.properties" todir="${build.test.dir}"/>

        <!-- files for cache testing -->
        <copy file="${source.spring.descriptor.dir}/jbilling-caching.xml" todir="${build.test.dir}"/>
        <copy todir="${build.resources.dir}/mediation">
            <fileset dir="${source.mediation.descriptor.dir}" includes="RateCard.*"/>
        </copy>

        <!-- run unit tests -->
        <mkdir dir="${build.test-results.dir}/unit/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>                                    

            <batchtest fork="yes" todir="${build.test-results.dir}/unit/xml">
                <formatter type="brief" usefile="false"/>
                <formatter type="xml"/>
                <fileset dir="${source.test.dir}/unit">
                    <!-- run specific unit tests with 'ant test-unit -Dtest=NameOfTest' -->
                    <include name="**/*Test*.java" unless="test"/>
                    <include name="**/${test}.java" if="test"/>
                    <exclude name="**/*Tester*.java"/>
                    <exclude name="**/*TestCase*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/unit/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/unit/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/unit/html"/>
        </junitreport>

        <fail if="test.failed" message="Unit tests failed! See log's for details."/>
    </target>

	<target name="test-remoting" depends="test.init">
	        <javac srcdir="${source.test.dir}/ws"
                   destdir="${build.test.dir}"
                   includes="RemotingTest.java"
                   debug="true" deprecation="false" nowarn="true" fork="true"
                   includeantruntime="false">
                <classpath refid="compile.classpath"/>
                <classpath refid="test.classpath"/>
	        </javac>

	        <copy file="${source.spring.descriptor.dir}/jbilling-remote-beans.xml" todir="${build.test.dir}"/>

	        <!-- run web service tests -->
	        <mkdir dir="${build.test-results.dir}/ws/xml"/>
	        <junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="true">
	            <jvmarg value="-Djava.security.manager" />
	            <jvmarg value="-Djava.security.policy=${source.resources.descriptor.dir}/app.policy" />
	            <jvmarg value="-Djava.security.auth.login.config=${source.resources.descriptor.dir}/auth.conf" />

                <classpath refid="compile.classpath"/>
                <classpath refid="test.classpath"/>
                
	            <formatter type="brief" usefile="false"/>
	            <formatter type="xml"/>

	            <test name="RemotingTest" todir="${build.test-results.dir}/ws/xml"/>
	        </junit>

	        <!-- generate testing reports -->
	        <mkdir dir="${build.test-results.dir}/ws/html"/>
	        <junitreport>
	            <fileset dir="${build.test-results.dir}/ws/xml" includes="TEST-*.xml"/>
	            <report format="frames" todir="${build.test-results.dir}/ws/html"/>
	        </junitreport>

	        <fail if="test.failed" message="Remoting test failed! See log's for details."/>
	</target>

    <target name="test-ws" depends="test.init" description="Run all web service tests and generate testing reports.">
        <javac srcdir="${source.test.ws.dir}"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <copy file="${source.spring.descriptor.dir}/jbilling-remote-beans.xml" todir="${build.test.dir}"/>
        <copy todir="${build.resources.dir}/rules">
            <fileset dir="${source.rules.descriptor.dir}">
                <include name="rules-generator-config.xml"/>
                <include name="*.vm"/>
            </fileset>
        </copy>

        <!-- run web service tests -->
        <mkdir dir="${build.test-results.dir}/ws/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="true">
            <jvmarg value="-Djava.security.manager" />
            <jvmarg value="-Djava.security.policy=${source.resources.descriptor.dir}/app.policy" />
            <jvmarg value="-Djava.security.auth.login.config=${source.resources.descriptor.dir}/auth.conf" />

            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>

            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>            

        	<test name="com.sapienter.jbilling.server.order.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.user.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.payment.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.item.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.invoice.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.pricing.WSTest" todir="${build.test-results.dir}/ws/xml"/>
            <test name="com.sapienter.jbilling.server.pricing.strategy.WSTest" todir="${build.test-results.dir}/ws/xml"/>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/ws/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/ws/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/ws/html"/>
        </junitreport>

        <fail if="test.failed" message="Web service tests failed! See log's for details."/>
    </target>

    <target name="test-integration" depends="test.init" description="Run all integration tests and generate testing reports.">
        <javac srcdir="${source.test.integration.dir}"
               destdir="${build.test.dir}"
               debug="true" deprecation="false" nowarn="true" fork="true"
               includeantruntime="false">

            <src path="${source.test.ws.dir}"/> <!-- todo: integration uses some support classes from ws tests, refactor -->
            <classpath refid="compile.classpath"/>
            <classpath refid="test.classpath"/>
        </javac>

        <copy file="${source.spring.descriptor.dir}/jbilling-remote-beans.xml" todir="${build.test.dir}"/>

        <!-- for mediation tests -->
        <delete  dir="${build.resources.dir}/mediation"/>
        <mkdir dir="${build.resources.dir}/mediation"/>
        <mkdir dir="${build.resources.dir}/mediation/errors"/>

        <copy todir="${build.resources.dir}/mediation">
            <fileset dir="${source.mediation.descriptor.dir}" includes="mediation.dtd"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="asterisk.xml"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="asterisk-sample1.csv, mediation-batch-test.csv"/>
            <fileset dir="${source.mediation.descriptor.dir}" includes="jbilling_cdr.*"/>
        </copy>

        <!-- run integration tests -->
        <mkdir dir="${build.test-results.dir}/org-integration/xml"/>
        <junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="true">
            <jvmarg value="-Djava.security.manager" />
            <jvmarg value="-Djava.security.policy=${source.resources.descriptor.dir}/app.policy" />
            <jvmarg value="-Djava.security.auth.login.config=${source.resources.descriptor.dir}/auth.conf" />

            <sysproperty key="mediation.errors.dir" value="${build.resources.dir}/mediation/errors"/>

            <classpath refid="compile.classpath"/>
            <classpath refid="spring.classpath"/>            
            <classpath refid="test.classpath"/>

            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>

            <!--
                The tests need to run in a specific order (partners first). Don't use batchtest!
            -->
            <test name="com.sapienter.jbilling.server.user.PartnerTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.process.BillingProcessTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.mediation.MediationTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
            <test name="com.sapienter.jbilling.server.provisioning.ProvisioningTest" unless="test.class" todir="${build.test-results.dir}/org-integration/xml"/>

            <!-- explicitly run a single test case if 'test.class' was set -->
            <test name="${test.class}" if="test.class" todir="${build.test-results.dir}/org-integration/xml"/>
        </junit>

        <!-- generate testing reports -->
        <mkdir dir="${build.test-results.dir}/org-integration/html"/>
        <junitreport>
            <fileset dir="${build.test-results.dir}/org-integration/xml" includes="TEST-*.xml"/>
            <report format="frames" todir="${build.test-results.dir}/org-integration/html"/>
        </junitreport>

        <fail if="test.failed" message="Integration tests failed! See log's for details."/>
    </target>

    <target name="test-mediation">
        <property name="test.class" value="com.sapienter.jbilling.server.mediation.MediationTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-provisioning">
        <property name="test.class" value="com.sapienter.jbilling.server.provisioning.ProvisioningTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-partners">
        <property name="test.class" value="com.sapienter.jbilling.server.user.PartnerTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>

    <target name="test-process">
        <property name="test.class" value="com.sapienter.jbilling.server.process.BillingProcessTest"/>
        <antcall target="test-integration" inheritall="true"/>
    </target>


    <!--
        jBilling "official" release generation targets
    -->

    <!-- todo: update for Grails app releases. Should generate a .war file along with our standard artifacts. -->

    <!--
         Warning: this task needs a lot of memory (at least 400MB), otherwise it fails with an obscure error.
         To fix set "ANT_OPTS=-Xmx400m -Xss128k"
    -->
    <target name="db">
        <!-- copy the schema files into torque dirs -->
        <copy todir="${torque.home.dir}/src/schema">
            <fileset dir="${source.torque.descriptor.dir}" includes="jbilling*"/>
        </copy>
        <ant dir="${torque.home.dir}" antfile="build-torque.xml" target="sql">
            <property name="torque.database" value="mysql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-mysql.sql"/>
        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="db2"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-db2.sql"/>
        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="hypersonic"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-hypersonic.sql"/>

        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="mssql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-mssql.sql"/>

        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="oracle"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-oracle.sql"/>

        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="postgresql"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-postgresql.sql"/>

        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="sql">
            <property name="torque.database" value="sybase"/>
        </ant>
        <copy file="${torque.home.dir}/src/sql/jbilling-schema.sql"
              tofile="${image.source.dir}/jbilling/resources/db-samples/jbilling-schema-sybase.sql"/>

        <ant dir="${torque.home.dir}"
             antfile="build-torque.xml"
             target="datasql"/>
        <copy file="${torque.home.dir}/src/jbilling-data.sql"
              todir="${image.source.dir}/jbilling/resources/db-samples"/>

    </target>


    <!-- Creates the full downloadable package -->
    <target name="packageImage">
        <!-- make sure it'll get the latest binaries -->
        <copy todir="${image.source.dir}/jbilling/webapps">
            <fileset dir="${build.deploy.dir}">
                <include name="billing.war"/>
            </fileset>
        </copy>
        <copy todir="${image.source.dir}/jbilling/conf"
              file="${source.resources.descriptor.dir}/ehcache.xml"/>
        <!-- if the app server was up, it generated temp files -->
        <delete dir="${image.source.dir}/jbilling/work"/>
        <delete>
            <fileset dir="${image.source.dir}/jbilling/logs">
                <include name="*.*"/>
            </fileset>
        </delete>
        <!-- ship with some additional files for the installer and
		     the paper invoice -->
        <mkdir dir="${image.source.dir}/jbilling/resources/designs"/>
        <copy todir="${image.source.dir}/jbilling/resources/designs">
            <fileset dir="${build.designs.dir}">
                <include name="simple_invoice_b2b.jasper"/>
            </fileset>
        </copy>
        <mkdir dir="${image.source.dir}/jbilling/resources/logos"/>
        <copy file="${source.view.dir}/graphics/jbilling-paper.jpg"
              tofile="${image.source.dir}/jbilling/resources/logos/entity-1.jpg"/>
        <!-- include the jbilling api as well -->
        <mkdir dir="${image.source.dir}/jbilling/resources/api"/>
        <copy todir="${image.source.dir}/jbilling/resources/api"
              file="${build.deploy.dir}/jbilling_api.jar"/>
        <copy todir="${image.source.dir}/jbilling/resources/api"
              file="${build.deploy.dir}/jbilling.jar"/>

        <mkdir dir="${image.target.dir}"/>
        <zip filesonly="false" update="false"
             destfile="${image.target.dir}/jbilling-${version}.zip">
            <fileset dir="${image.source.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- Creates the source packages for distribution -->
    <target name="packageSource">
        <delete file="${image.target.dir}/${jbilling-${version}-src.zip}"/>
        <zip filesonly="false" update="false"
             destfile="${image.target.dir}/jbilling-${version}-src.zip">
            <zipfileset dir="${source.dir}" prefix="jbilling/src"
                        excludes="**/log4j.xml,**/postgres-ds.xml,**/server.xml,build/**,nbproject/**,**/.git/,activemq-data/**,*,**/*.swp,tmp/**,**/*.jasper,**/simple_invoice_jb.jrxml,**/Verisign.jar"/>
            <!-- the following three files are taken from the binary view. My own are configured for my box -->
            <zipfileset dir="${image.source.dir}/jbilling/conf"
                        includes="log4j.xml" prefix="jbilling/src/descriptors/resources"/>
            <zipfileset dir="${basedir}" includes="build.properties.sample"
                        fullpath="jbilling/src/build.properties"/>
            <zipfileset dir="${basedir}" includes="build.xml" prefix="jbilling/src"/>
            <zipfileset dir="${basedir}" includes="COPYING" prefix="jbilling/src"/>
        </zip>
    </target>

    <target name="uploadRelease">
        <ftp password="admin@jbilling.com" remotedir="incoming" depends="yes"
             server="upload.sourceforge.net" userid="anonymous">
            <fileset dir="${image.target.dir}">
                <include name="jbilling-${version}-src.zip"/>
                <include name="jbilling-${version}.zip"/>
                <include name="jbilling_installation_instructions.pdf"/>
            </fileset>
        </ftp>
    </target>

    <target name="package-war"
            depends="war, clean, copy-resources, compile-designs, compile-reports, compile-rules"
            description="Packages a war file with the necessary config files and resources for release.">

        <tstamp/>

        <delete dir="${basedir}/target" includes="jbilling-*.zip"/>

        <zip filesonly="false" update="false" destfile="${basedir}/target/jbilling-${DSTAMP}-${TSTAMP}.zip">
            <zipfileset dir="${build.resources.dir}" prefix="resources"/>
            <zipfileset dir="${source.dir}/java" includes="jbilling.properties"/>
            <zipfileset dir="${source.grails.conf}" includes="Config.groovy" fullpath="jbilling-Config.groovy"/>
            <zipfileset dir="${source.grails.conf}" includes="DataSource.groovy" fullpath="jbilling-DataSource.groovy"/>
            <zipfileset dir="${basedir}/target" includes="jbilling.war"/>
            <zipfileset dir="${basedir}/sql" includes="jbilling_test.sql"/>
        </zip>
    </target>

    <!--
        Utility targets
    -->

    <!--
         Generates rules using a velocity template file and a CSV of data given as task properties

         e.g., "ant generate-rules -DrulesTemplateFile=template.vm -DrulesDataFile=data.csv"
    -->
    <target name="generate-rules" description="Rules generation from velocity template and csv data file">
        <echo>Generating rules for input template ${rulesTemplateFile} and data file ${rulesDataFile}</echo>

        <!-- todo: where to put generated rules? -->
        <!-- Copy test Digester config and Velocity templates for generateRules API method. -->
        <copy todir="${build.resources.dir}/rules">
            <fileset dir="${source.rules.dir}">
                <include name="**/*.vm"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>        

        <!-- run the rules generator -->
        <java classname="com.sapienter.jbilling.tools.RulesGenerator" failonerror="true">
            <classpath>
                <path refid="compile.classpath"/>
                <fileset dir="${digester.dir}" includes="*.jar"/>
                <pathelement location="${build.classes.dir}"/>
            </classpath>
            <arg value="${source.rules.dir}/templates/${rulesTemplateFile}"/>
            <arg value="${source.rules.dir}/${rulesDataFile}"/>
        </java>

        <!-- delete velocity output log -->
        <delete>
            <fileset dir="${basedir}" includes="velocity.log*"/>
        </delete>
    </target>

    <target name="export">
        <tstamp/>
        <delete file="${source.dir}/jbilling-exp-${DSTAMP}.zip"/>

        <zip filesonly="false" update="false" destfile="${source.dir}/jbilling-exp-${DSTAMP}.zip">
            <!-- Copy jbilling.war and guvnor.war. -->
            <zipfileset dir="${deploy.local.dir}" prefix="webapps" includes="*.war"/>

            <!-- Copy jasperserver -->
            <zipfileset dir="${deploy.local.dir}" prefix="webapps" includes="jasperserver/**/*"/>

            <!-- Copy the API jar file -->
            <zipfileset dir="${build.deploy.dir}" prefix="resources/api" includes="jbilling_api.jar"/>

            <!-- Copy the conf directory. -->
            <zipfileset dir="${jbilling.conf.dir}" prefix="conf"/>

            <!-- Copy the resources directory. -->
            <zipfileset dir="${deploy.resources.dir}" prefix="resources"/>

            <!-- Copy the DB dump (assumed to be 'data.sql' in the 'src' directory). -->
            <zipfileset dir="${source.dir}" includes="data.sql" fullpath="backup/data-${DSTAMP}.sql"/>

            <!-- Copy the reports DB dump (assumed to be reports.sql in the 'src' directory). -->
            <zipfileset dir="${source.dir}" includes="reports.sql" fullpath="backup/reports-${DSTAMP}.sql"/>

            <!-- Copy the rules repository files (from 'bin' directory). -->
            <zipfileset dir="${server.dir}/bin" includes="repository.xml" prefix="bin"/>
            <zipfileset dir="${server.dir}/bin/repository" prefix="bin/repository"/>

            <!-- Copy the extra libs required by Guvnor -->
            <zipfileset dir="${server.dir}/lib/" includes="jsf*.jar" prefix="lib"/>
            <zipfileset dir="${server.dir}/lib/" includes="jboss-faces.jar" prefix="lib"/>
        </zip>
    </target>

    <target  name="reformat-text" description="Cleans up text files and sets the appropriate eol character.">
        <!-- replace tab characters with spaces -->
        <!-- replace UNIX eol characters with DOS characters -->
        <fixcrlf srcdir="${source.classes.dir}" includes="**/*.java"
                 tab="remove" tablength="4" javafiles="yes"
                 eol="crlf"/>
    </target>


    <!--
        Git version control commands
    -->

    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default=""/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="git-clone-pull">
        <attribute name="repository"/>
        <attribute name="dest"/>
        <sequential>
            <git command="clone">
                <args>
                    <arg value="@{repository}"/>
                    <arg value="@{dest}"/>
                </args>
            </git>
            <git command="pull" dir="@{dest}"/>
        </sequential>
    </macrodef>

    <target name="checkout" description="Update files from GIT">
        <git command="pull" dir="${source.dir}"/>
    </target>

</project>

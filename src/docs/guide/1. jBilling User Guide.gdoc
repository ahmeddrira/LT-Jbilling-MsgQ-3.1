h1. INTRODUCTION

Thank you for your interest in *j*Billing! 

If you are new user, and have not yet read or completed the *[Getting Started Guide|http://www.jbilling.com/documentation/getting-started-with-jbilling]*, it is highly recommended that you do so. 

Unlike the Getting Started Guide, The purpose of the *j*Billing User Guide is *not* to provide detail, specific examples for you to follow. Its purpose is to provide a concise breakdown of all aspects and functions of the *j*Billing system.  
The guide has been broken down into fourteen chapters, followed by an appendix:

* Chapter 1: Products
* Chapter 2: Users
* Chapter 3: Purchase Orders
* Chapter 4: The Billing Process
* Chapter 5: Invoices
* Chapter 6: Mediation
* Chapter 7: Payments
* Chapter 8: Plans
* Chapter 9: Notifications
* Chapter 10: System Configuration
* Chapter 11: Sub Accounts
* Chapter 12: Blacklist
* Chapter 13: Reports
* Chapter 14: Security
* Appendix A: Preferences

By the end of this document, you will not only know what *j*Billing can do, you will also understand how to set-up and run *j*Billing based on your business rules and needs.

h1. CHAPTER 1: PRODUCTS 'Your Catalog of Goods and Services'

h2. Product Management

Creating Product Categories and Products are the first tasks you must complete in order to set-up *j*billing. Before you begin, however, there are two questions you must answer:

# What does my company sell?
# How can I categorize those products?

Within this chapter, you will find the following sections:

* Product Categories
* Products
* Pricing Models



h2. Product Categories

h3. Overview

A product needs to belong to at least one category. Therefore, the first thing you must do is create a category. Categories will also help when you run a report. They make it easier to identify if certain products distort the results.

For example: in a report rendering the revenue for a given year, it is important to exclude taxes. *j*Billing will facilitate this if all the products relating to taxes are sorted into a single category.

h3. Creating a Category

To create a category, click on 'Products' and then the '+ Add Category' button. 

!addaproduct.png!

The Add Product Category screen will appear.
 
The fields you will see on this screen are defined below: 

*Category ID*

!categoryidnew.png!

When you first create a category, the Category ID will show up as: New. Once you save the category, a sequential number will be automatically generated, or assigned. This number helps *j*Billing to internally identify categories. 

!categoryid1.png!

*Type*

Categories have a type associated to them. In the screen shot below, type can be: 'Items', 'Tax' or 'Penalties'. The type affects how the invoices are calculated, and how the products are presented in the invoice. 

For example: a product that belongs to the category type: 'Tax' will not be included as the base when calculating another tax. For PDF versions of invoices, where the total 'Tax' amount is segregated, *j*Billing knows which product is a tax by checking the category to which it belongs.

!categorytype.png!

*Name*

Enter the name you want to give to your category into this text box.

!categoryname.png!

*Save*

After you have completed filling out the fields, you can save the category by clicking on the 'Save Changes' button.

!savechanges.png!

*Edit*

To make changes to a category, select the category you wish to change and click on the 'Edit' button. 

!categoryedit.png!

*Delete*

To delete a category, select the one you wish to remove, and click on the 'Delete Category' button located in the pane on the right hand side of your screen.

!deletecategory.png!

{note}
Please Note: to delete a category that has products, you will have to delete them before you can delete the category. Refer to the Products section of this guide (below) to learn how to delete a product.
{note}

h2. Products

h3. Overview

Products represent the catalog of services or goods sold by your company. Creating one, gives you the ability to detail the description and price of a product. 
A product can also be a promotion, interest, late fees, a tax or anything else that you might want an invoice to contain.

h2. Creating a Product

As illustrated below, to create a product, click on the category you wish to add the product to, and click the '+Add Product' button. The Add Product screen will appear.

!addproduct.png!

The fields you will see on this screen are defined below: 

*Product ID*

!productidnew.png!

When you first create a product, the Product ID will show up as: New. Once you save the product, a sequential number that helps *j*Billing to internally identify products will be assigned.

!productid1.png! 

*Description*

Here is where a product is named. This name will eventually be displayed on the invoice. It can be edited when creating a purchase order. Here, the default language of your company should be used, which was configured during sign-up.

You need to initially enter the description in your company's default language. If you need to enter the description in more than one language, you can do so later by editing the product.

!productdescription.png!

*Line Percentage*

Filling in this text box indicates that you wish for the value of this product to be calculated as a percentage of the total of the purchase order. 
For example: a tax, such as the VAT (Value Added Tax) or GST (Goods and Services Tax), which is a fixed percentage of the total value of the product. 

!linepercent.png!

{note}
Please Note: if this field is filled out, the 'price' fields have to be left blank.
{note}

*Allow Decimal Quantity*

Flagging this field allows you to enter amounts with decimal values.

!allowdecimal.png!

*Product Code*

This field is optional. It is the identification you will use internally to distinguish your product. You can assign any combination of numbers, letters and symbols to your product. It is possible to assign the same product code to more than one product. The numbers, letters, and symbols you assign to your product will affect the order in which it will appear with the other products in an invoice. 

!productcode.png!

{note}
Please Note: the most important effect that the product code has is that it *determines how products will be numbered in an invoice.*
{note}

If a product's order in an invoice is important to you, you should think of a number strategy to follow. Let's say that you want all your normal items to show up first, followed by any discounts and lastly, the taxes. In this case, you might want to start the product code with a letter that follows these three groups: 'A' for normal products, 'B' for discounts, and 'C' for taxes. These are prefixes and can be followed by a number. 

For example:

* A-1 Monthly front page banner
* A-2 Featured article
* B-1 One year subscription discount
* C-1 State taxes

*GL Code*

If applicable, enter the GL code for the product into the text box. 

!glcode.png!

*Categories*

Select the category the product will belong to. Each product needs to be assigned to at least *ONE* category, and may be belong to more than one.

!productcategories.png!

*Edit*

To edit a product, ensure that the product you wish to change is selected, then click on the 'Edit' button.

!productedit.png!

*Delete*

To delete a product, select the product you wish to remove and click on the 'Delete' button. 

!productdelete.png!
 
h2. Pricing Models

h3. Overview

There may be situations in your business where a product is not going to have straight forward or simple price. Due to this fact, when you create a product in *j*Billing,  
the system allows you to use different pricing models to accommodate these special prices.

For example: you may wish to have a product that is on sale during a certain time of the year. You may want to give a discount to your VIP customers after they purchase a  
particular amount of a particular product. You may also wish to have a product that doesn't have a cost associated to it. Through an internal based system, *j*Billing can do all this, and more. 

Let's take a look at the different pricing models which *j*Billing currently supports:

h3. Flat

If this pricing model is selected for a product, there will be no cost associated to it in the purchase order.

!pricingflat.png!

For example: an internet provider includes a free modem with a two year subscription. The company would create the modem as the product, and assign a 'Flat' pricing model to it. When they create a purchase order for a client, the modem will show up with a price of $0.

!flatorder.png!

h3. Metered

If this pricing model is selected, one unit will equal a set price. This means that if you have a product that costs $40, on the purchase order you will see $40. If you need  
to add that product twice to the purchase order, the total cost will then be $80. 

!meteredpricing.png!

For example: a company sells a Test Product for $100. A customer wants to buy two of them.  Therefore, the purchase order will be a total of: $200.

!meteredpurchaseorder.png!

h3. Graduated

If you select this model, the customer will receive a set amount or an 'Included Quantity' of that particular product for free. After that set number runs out, they are  
charged for that product. 

!graduatedpricing.png!

For example: a customer would like 5 Test Products. Since the included quantity is set to 5, notice that the total of this purchase order is $0.

!graduatedorder.png!

Before the purchase order is complete, the customer changes his mind and would now like 7 Test Products. The rate for each Test Product is $30. Since 7 is two more than 5, the  
total cost is $60, because the customer is really only being charged for 2 Test Products. 

The breakdown of cost is a little different for this purchase order. It does not show 7 Test Products: $30 multiplied by 2. It divides the total cost, (in this case $60) over  
the quantity, which, in this case is 7. Therefore, the cost for each Test Product displays as: $8.57.

!graduatedorder2.png!

h3. Graduated Cap

This pricing model is very similar to Graduated. However, there is a cap on the maximum amount on the total.

For example: if you look at the previous example, but add a cap of $100 to the product, your customer will not be charged if they purchase up to 5 Test Products. They will be charged for the additional Test Products, until the total reaches $100. If the customer decides they want 10 Test Products, they will only be charged $100, instead of $300 (30 multiplied by 10). 

!graduatedcap.png!

h3. Time of Day

This field allows you to set pricing based upon the time of day it runs on. 

For example: a cell phone company would like to give their customers:  an evening free, on all local phone calls. Free calling will start at 6:00 PM, every weekday evening. 

h3. Tiered

The tiered pricing model is very similar to Graduated, except that it has many different layers. What this means is that a price for a product will change depending on how  
much you buy.

For example: if a customer buys 100 Test Products it will cost them $10 per product. However, if they buy 101 to 200 Test Products, it will cost them $5 per product. If the  
customer decides to purchase 201 to 300 Test Products it will cost them $3 per product. 

h3. Pooled

A pooled pricing model occurs when you have a parent account with many children accounts. The parent account will provide a number of units that the children will be able to  
use until it runs out. After this, the children would have to pay for whatever balance runs outside the set number of units.

For example: a parent account pays for the cell phone bills of its children. However, they will only pay for 200 minutes of calling time. If a child account uses 300 minutes  
of calling time, they will have to pay for the cost of the 100 additional minutes. 

{note}
Please Note: if you have filled out the line percentage field, the Pricing section should be left blank.
{note}

h2. Add a Chain

Another function included with these pricing models is the ability to add a chain. This allows you to add a percentage, which will then be applied in addition to the pricing model for the product. To add a chain, click on the 'Add Chain' button.

!addchain.png!

Let's refer back to the graduated example, and add a chain to it:

!addchainexample.png!

When a purchase order is created, the first 5 Test Products are free. When a customer orders 6 however, there is an additional 50% discount, therefore the total cost is $15 instead of $30.

!addchainorder.png!







h1. CHAPTER 2: USERS

h2. Customers and Other Types of Users

Right after the products have been created, entering your customers information is typically the second step you would take to get *j*Billing set-up. 

Customers act as a base to all the information stored and generated by *j*Billing. Customers are the ones who buy your goods and services, thus, they are the recipients of the invoices that *j*Billing generates. They will login to  
*j*Billing to view their invoices, update their contact information (address, phone number, etc.), edit their credit card information, submit payments, etc. 

Information about your customer *must* be entered in the system before you can start creating purchase orders. 

Keep in mind that there are other types of users who also interact with the billing system. Your staff, for example, will need to login, fulfilling roles such as: customer service (telling a customer about a late invoice, or that a cheque arrived, etc), amongst other tasks. This aspect of the *j*Billing system will be discussed in further detail in Chapter 10: System Configuration.

h2. Your Customer List

What does it do?

Your list of customers is the most important list in the system. From here, you can navigate to a particular invoice, payment, or order. 

To access your list, click on 'Customers'.

!customerlist.png!

h2. New Users

h3. Creating a Customer

To create a customer, click on 'Customer', and then click on the '+ Add New' button.
  
!newcustomer.png!

The New Customer screen requires you to enter your customer's basic login information. Once this basic information has been saved, you can start creating purchase orders for this customer. 

The fields you will see on this screen are defined below:

*Number*

!numbernew.png!

When you first create a customer, the Number will show up as: New. Once you save the customer, *j*Billing will assign a number to them.

!number2.png!

*Login Name / Password*

The login name and password will allow your customer to access his/her billing information. This information can be included on the invoices sent to them. To learn more, please refer to, Chapter 9: Notifications. 

!loginpassword.png!

*Status*

Most customers will have a status of active, meaning they have continuing purchase orders. A customer's status can change to overdue or suspended if they have not paid their invoices. They can also be deleted, for example, if they no  
longer require your services.

!status.png!

*Subscriber Status*

This field describes what kind of subscription the customer has with your company.

!subscribestatus.png!

*Language*

Select from the drop down menu, the languages that you want to associate with the customer. 

!language.png!

*Currency*

Select the preferred currency this customer will operate with.

!currency.png!

*Partner ID*

If this customer has been referred to you by a partner, enter the partner's ID number here.

!partnerid.png!

*Parent ID*

If this customer belongs to a 'Parent Customer', enter the 'Parent Customer's' ID here. This field is related to the sub accounts feature which is described in further detail in Chapter 11. 

!parentid.png!

*Allow Sub-Accounts*

Check this box if this customer will have 'children' accounts. This field is also related to the sub accounts feature, which is further explained in Chapter 11.
 
!allowsub.png!

*Exclude from Ageing*

If this field is selected, the customer will *not* be included in the aging process. For more information, please refer to Chapter 10: Configuration.

!excludeage.png!

*Contact Type*

This feature allows you to organize the multiple types of contacts you might have for each customer.

!contacttype.png!

For example: you have the main contact information for a customer, as well as for their accounting contact. This means that you can submit all the email notifications (invoices, payments, reminders, etc), to both your customer and  
his/her accountant. 

Each contact type you create can be included in the email notifications. For more information, please refer to Chapter 10: Configuration.

{note}
Please Note: one contact type must be the primary contact. This contact will be used for the address on the printed invoice. The primary contact will always be included in the email notifications, whether the 'Include in Notifications'  
box has been checked or not.  
{note}

*Email*

This field requires the electronic address where all email notifications for this customer will be sent. This email address will be assigned to the customer's primary contact.
 
!email.png!

This field is mandatory, so you will need to enter a fake email address if you do not have it, or are not interested in email notifications. The reason why this field is so important in *j*Billing is because the system is much more  
effective when customers can be easily (and cheaply) contacted to notify them of billing events: a new invoice, an invoice reminder, the result of a payment, etc. Please refer to Chapter 9: Notifications for more information. 

*Include in Notifications*

You have the option of sending email notifications to your customers (reminders, announcements, warnings etc.). Check this box if you want to include this contact's email on the list of recipients. 

!includenotification.png!

{note}
Please Note: this is only relevant if you are working with more than one contact type, and will only take effect on those types that are not the primary one. The contact type considered 'primary' is always preference included in the  
email notifications. If you don't want a customer to get any notifications, provide a fake email address in his/her contact information. 
{note}

*Credit Card*

Enter your customer's credit card information here by clicking on the plus sign '+' to open the information pane.

!creditcard.png!

*ACH*

To enter your customer's ACH information, click on the plus sign '+' to open the information pane.  

!ach.png!

*Save*
To save your new customer, click on the 'Save Changes' button located at the bottom of the New Customer screen.

!savechanges.png!

*Edit*

You can modify a customer's information at any time. To do this, click on the customer who's information you wish to change, scroll down to the bottom of the page, and click on the 'Edit' button.

!edit.png!

*Deleting Users*     
       
To remove a user of any type, click on the Customers link, click on the customer you wish to delete, scroll down to the bottom of the screen, and click on the 'Delete' button.
 
!delete.png!                                                                                           

h2. Dynamic Balance

The dynamic balance feature allows customers to pay in advance for their purchases through either a pre-paid balance or a credit limit.

!dynamicbalance.png!

Customers with a pre-paid balance pay upfront before they receive any product or service. As usage occurs, the cost is deducted from the user's pre-paid balance until none remains.

Users with a credit limit are allowed to accrue 'debt' until a set credit limit is reached. All usage by the customer is paid on credit, and the user is responsible for paying off the credit they have used.

{note}
Please Note: a customer will only be prevented from exceeding their configured limit (going over the credit limit, or spending more than their pre-paid balance allows), when using the @'validatePurchase'@ API call. Additional orders may  
still be created manually through the UI, or through the standard @'createOrder'@ API.
{note}

Management of dynamic balances is provided by a plug-in, and it must be configured for either pre-paid balance, or credit limit balance types to be used.

*Customer Configuration*

A customer's dynamic balance configuration can be set or changed by editing an existing customer. 

*Balance Type*

Balance type allows you to change how a user's dynamic balance is to be handled, or if the dynamic balance feature is to be used at all. 

!balancetype.png!

# None: The user's account will not hold a balance. Instead, all charges accrued will be included in the next invoice.
# Credit Limit: The user's account may accrue charges up to the set credit limit value. Charges will automatically be paid from the user's credit pool until the set limit is reached. Users are responsible for paying their credit debt as well as any overages.
# Pre-Paid balance: The user must pay into their account to offset future charges. Charges will automatically be paid from the user's pre-paid balance until the balance reaches zero. Users are responsible for maintaining their pre-paid balance.  

*Credit Limit*

This field is only available when the Balance Type is set to 'Credit Limit'. This field contains the user's current credit limit as a dollar amount.
 
!creditlimit.png!

*Auto-Recharge Threshold*

This field is only available when the Balance Type is set to 'Pre-Paid', and an Automatic Recharge Plug-In has been configured. This field contains a dollar amount that will be automatically charged to the users credit card when their  
balance drops below the company wide threshold. If this field is set to zero or left blank, no automatic charges will be made for the user.
 
!autorecharge.png!

*Invoice Delivery Method*

This field gives you the option to choose how this customer will receive his/her invoices.

!invoicedelivery.png!

# Email: The system sends the invoices as an email only.
# Paper: The system will not send an email to the customer. Instead, the invoice will be included in a file with all the other paper invoices. This file is in PDF format and will be emailed as an attachment to the billing administrator or to the system administrator depending on your selection in notification preferences (please refer to Chapter 9 for more details). Printing the invoices is simplified by the fact that all of them are in one single file. 
# Email + Paper: Both methods are used: an email and a paper invoice as described above. 

*Due Date*

Here, you can choose to specify a due date for a particular client, which will overrun your company's default date.

!duedate.png!

h2. Custom Contact Fields - configuration

It is possible to have fields of contact information customized to your needs. These fields can show up on the printed invoice. 

For example: you might need a tax number to appear on the printed invoices, for legal or accounting purposes. Or, you might wish to have customers' home phone and work phone numbers.

Custom contact fields (CCF) are also important when using some of jBilling extensions. Many plug-ins require a CCF as part of their configuration. 

For example: There is a payment processor plug-in that allows you to assign a payment gateway to a customer. The payment gateway that all the customer's payments will be processed through is entered in a CCF. The plug-in then reads the  
CCF content before routing the payment request to the appropriate gateway.

h2. FAQ

* How do I generate a list of all the invoices belonging to a particular customer?
Click on the customer whose invoices you wish you view. Then, click on the 'Show all invoices' link, located in the Account pane on the right hand side of your screen.

!showallinvoices.png!

A list of all invoices for that customer will appear.

* How do I generate a list of all the purchase orders belonging to a particular customer?
Click on the customer whose purchase orders you wish to view. Then, click on the 'Show all order' link, located in the Payment Info pane on the right hand side of your screen. 

!showallorders.png!

A list of all orders for that customer will appear: 

!listoforders.png!

* How can I view the latest invoice generated for a particular customer?
Click on the customer whose information you wish to view. Click on the Last Invoiced Date link.

!latestinvoice.png!

The latest invoice generated will appear on the right hand side of the screen. 

* How can my staff write comments regarding a customer's file and communicate together without the customer having access to this information?
Click on the customer you wish to add a note for. Click on the 'Edit' button. Scroll down to the bottom of the screen. You will see a large box titled: Notes. Enter your text. 

!notes.png!

When you are finished, click the 'Save Changes' button. Your note will appear in the pane on the right, beneath the customer's name.

!thisisanote.png!

{note}
Please Note: this is only possible if you have *not* configured customer notes to appear on the invoice.
{note}





h1. CHAPTER 3: PURCHASE ORDERS 'Keeping Subscriptions and other Purchases Well Organized'

h2. Overview

In a nutshell: *any change made to your customers must be backed by a purchase order.*

A subscription, a single purchase, a tax or interests on a late payment, are all represented by a purchase order.
 
Purchase orders provide the main source of information for the next generation of invoices. A purchase order will generate at least one invoice, and in many cases, several invoices across many billing cycles. Many purchase orders can  
also be involved in the generation of a single invoice. Let's take a look at examples for both cases. 

h3. One Purchase Order Generating Many Invoices

In this case, a purchase order could be valid for several months and generate one invoice per billing cycle.
 
For example: one of *Trend's* customer's order the top banner for four months, paying monthly. This subscription is represented by just one purchase order. The customer will receive four invoices, one for each month. 

h3. Many Purchase Orders Generating One Invoice

This occurs when many purchase orders are active for the same customer, for a given billing cycle.
 
For example: let's say that a customer, after one month of running the top banner, also decides to buy from *Trend*, a lateral banner in other pages. This would involve creating a new purchase order. As long as both orders are active,  
they will generate one invoice with both charges: the top and lateral banners. 

Customers will receive a single invoice per billing cycle. This invoice compiles all active purchase orders. 

h2. Creating Orders

To save space in *j*Billing, purchase orders are simply referred to as Orders. To begin creating one, you first need to select the customer that you are creating the purchase order for. Once you have selected your customer, scroll down  
to the bottom of the screen and click on the 'Create Order' button.

!createorder.png!

The Purchase Order form will appear on your screen. First, you must set-up the information in the Details tab. 

!detailstab.png!

The fields you will see on this screen are defined below:

*Period*

The order's period determines how often the order will generate an invoice. A purchase order can reflect a one-time purchase or a periodic service invoiced for each period. The list of periods displayed in this dropdown menu corresponds  
to the order periods that have been configured for your company.

{note}
Please Note: it is possible to add or modify these periods. To learn more, please refer to Chapter 10: Configuration. 
{note}

!period.png!

*A one-time purchase order is only going to be included in one invoice. These kinds of purchase orders are similar to a retail site, where there is no commitment from the customer to repeat the transaction. 
*A Monthly purchase order indicates that the purchase will appear on an invoice once per month.
*A Quarterly purchase order means that the purchase will appear on an invoice once every three months.
*A Weekly purchase order indicates that the purchase will appear on an invoice once every seven days.

{note}
Please Note: to learn more about this, please see the Order Periods section of this chapter. 
{note}

*Type*

Type indicates when the purchased services will be paid. This can be in advance (pre-paid), or after service (post-paid). 

!ordertype.png!

Pre-Paid example: *Trend* always bills its customer's in advance. Therefore, all its purchase orders are pre-paid: customers must pay *before* they can see their ads online. 

Post-Paid Example: a landscape maintenance company would send an invoice to a customer once the job is *finished*, exemplifying a post-paid purchase order.

*Active Since / Until*

Here you can specify if this order applies to a limited period of time. The field 'Active Since' automatically populates today's date. This date is generated on the invoice and reflects the date the order was created. 

!activesinceuntil.png!

If the field 'Active Until' is left blank, it implies that this purchase order will be on-going, with no specific end date. 

*Periodic or Recurring:*

A periodic or recurring purchase order has a period of time assigned to it. This period of time determines how often the purchase order recurs. The periods available to a purchase order can be seen and modified by clicking on the  
dropdown Period field.

For example: *Trend* only wants to allow recurring purchase orders every: 15 days, 1 month, or 3 months. A detailed explanation of how to configure *j*Billing to use these three periods can be found in the 'Order Periods' section. For  
now, let's examine a few combinations of values for periodic purchase orders:

{table}
 *Period*|*Active Since*|*Active Until*|*Result*
 Monthly | Today's date | Blank | An invoice will be generated every month, starting on the date the order is created. This order is ongoing and will keep generating invoices until the customer decides to cancel their subscription.
 15 Days | Blank | July 1st, 2012 | An invoice will be generated every 15 days, starting the day the order is created. This will end on July 1st, 2012.
 3 Months | May 1st, 2012  | Blank | The customer will be billed for 3 months of services, starting on May 1st, even if the order was created before this date. This order is on-going and will keep generating invoices until the customer decides to cancel their subscription.
 Monthly | May 1st, 2012 | June 30th, 2012 | This order will only generate two invoices, one for May and another one for June. 
{table}

*Due Date*

The due date that will be applied to all your customers company wide, is found in the Billing Process Configuration section. In the Customer section, you can choose to specify a due date that will apply to a client in particular. Here, at the purchase order level, you can override the previous configurations and apply a due date to one particular purchase order, and therefore to one specific invoice. 

!orderduedate.png!

*Main Subscription*

This field should be selected if the purchase order is labelled as a main subscription within your company's business rules.

!mainsubscription.png!

*Notify user when order expires*

This field only applies when an 'Active Until' date has been specified. Should you check this box, *j*Billing will automatically send a notification to your customer, reminding them that the purchase order has expired. Up to three messages can be sent. When they are sent and what text is used is determined in Chapter 10: Configuration.

!notifyexpire.png!

*Notes*

This field allows you and your staff members to write comments about a customer's purchase order without the customer having access to that information. Please see: *Include Notes on Invoice* to learn more.

!notes.png!

*Include Notes on Invoice*

If this field is checked, *all* notes and comments made by you and your staff will appear on the customer's invoice. 

!includeinvoice.png! 

h3. Adding Products to a Purchase Order

It is time to add items to the order with the services that have been purchased.

The first step in adding a product to the purchase order is to click on the Products tab. A list of all products will appear. Select a product and it will appear in the Order # pane on the right hand side of the screen. Click on the  
'Update' button. 

!purchaseorder.png!

The product will appear listed in the purchase order. 

*Pro-Rating*

Pro-rating allows for the invoicing of partial periods. When you have a recurring order, it will generate an invoice per period. 

For example: your customer receives an invoice every month. Under normal circumstances, your customer will receive an invoice for the *whole* period, therefore for the full amount of the services they have subscribed to. 
However, it is very possible that for the first or last period of the subscription, your customer has to be invoiced for only a fraction of the full period. In these cases, the system has to calculate the amount to be invoiced  
considering the total time invoiced compared to the time of a full period. This 'fractional invoicing' is what called: pro-rating.

Let's review a typical scenario where pro-rating is necessary. You have a customer, who is subscribed to a number of services. On the 10th of every month, this customer receives *one* invoice with all the charges for the services they  
are receiving from your company. 

On the 20th of one month, the customer calls your company's customer service to subscribe to another service that is $60 a month. From now on, your customer will not want to receive an invoice on the 10th, plus another one on the 20th  
with only the new service. It is much simpler to send one monthly invoice. However, since your customer is subscribing on the 20th, you can't charge them for the full month.
 
With pro-rating, you can add a new purchase order with the new service, and specify that the order should fit the '10th of the month' cycle. The next invoice will add about two thirds of the full period ($40 in this example) for this  
initial period of the new service. Subsequent invoices will show the full period of $60.

A similar situation occurs when the customer cancels a service and you need to invoice for that last part of a period proportionally to the price of a full period. Using our previous example, if the customer wants to cancel, the last day  
being the 25th, then the next invoice should show the charge for the period between the 10th (the beginning of the billing cycle), and the 25th. 

*Enable Pro-Rating*

By default, pro-rating is not enabled in *j*Billing. This means that *j*Billing expects all orders to invoice full periods only. If you try to enter an order that does not fit full periods, you will get an error. 

For example: an order with an 'Active Since' of February 1st and 'Active Until' of March 10th will not save on the order.

You need to tell *j*Billing that you want to work with fractions of a period by using pro-rating.  

*Calculating the Fractions of a Period:*

The plug-in that you will configure, will take the length of the cycle and count the number of days within it. The plug-in will divide total of the order by the number of days in the cycle. This result is the daily cost. The plug-in will  
then multiply the daily cost by the total number of days in the period. This means that 15 days in the month of June will be half the monthly price, but not for July as it has 31 days. 

{note}
Please Note: this is the 'daily' pro-rating plug-in. You can implement other types of pro-rated calculations by creating your own plug-in. 
{note}


*Change the Pro-Rating Plug-Ins*

Preference 42 indicates if a company is going to be using pro-rating or not. Since this feature is not the default, you need to override it. Change the value to: 1.

You also need to change the default plug-ins that deal with invoice generation so the system can make the additional calculations that pro-rating requires. 

Click on the Configuration link, and then on Plug-ins. In the list of Plug-In categories that appears, find:

 @com.sapienter.jbilling.server.pluggableTask.BasicCompositionTask@

You will need to replace this with:

@com.sapienter.jbilling.server.process.task.DailyProRateCompoisitionTask@ 

You will also need to replace:

@com.sapienter.jbilling.server.pluggableTask.BasicOrderPeriodTask@

With: 

@com.sapienter.jbilling.server.process.task.ProRateOrderPeriodTask@

Click on the 'Save Plug-in' button to save your changes.

!saveplugin.png!

*The Order 'Cycle' Attribute*

Once pro-rating is enabled, you will see a new attribute in your orders. 

!cyclestart.png!

This new attribute is called the 'Cycle Start' date. It tells the system when it is that this order should generate an invoice. Any invoice coming from this order has to be aligned to this date. 
* If the 'Active Since' field is not the same as (or aligned to) the cycle date, then you will have a first invoice with a pro-rated value. This is an amount that is smaller than the total of the order.
* The 'Active Since' is not a required field. If left blank, it defaults to the order's creation date.
* If the 'Active Until' is not aligned to the cycle date, then the last invoice from this order will be pro-rated.
* The 'Active Until' is not a required field. If left blank the order is ongoing. 

As you can see, this attribute defines the cycle of the order and adds to the 'Active Since' and 'Active Until' dates, to give orders pro-rating behaviour. 

{note}
Please Note: the 'Active Since' and 'Active Until' fields work exactly the same. Their functions have not changed. 
{note}
 
Keep in mind that the cycle date is not a required field. If left blank, the order won't be pro-rated, it will simply be a 'normal' order. However, this also means that you will only be able to change the cycle date if the order has not  
generated any invoices. 

Let's take a look at the term 'aligned'. 'Aligned' refers to the fact that the order generates an invoice by taking the cycle date and order's period into consideration. In the above screenshot, the cycle starts on the first of January  
and the order is Monthly. What this really means is that the customer expects an invoice on the first day of every month. 

Because the order starts on the 10th of January (the customer has their service activated on this date), then the first invoice will still be on January the first. However, rather than charging for the full amount, the invoice will only  
be for the 10th to 31st period, or about two thirds of the monthly total. 

As you can see, the cycle date is an attribute as the order level. Any order can have its own value for this date. This allows for very complex scenarios that you probably want to avoid. It is better to have all the recurring orders for  
a given customer with the same cycle date. 

h3. Examples

*Signup in the middle of the month:*

*Trend* is a company that prefers to invoice all its customers on the 1st of the month. Customers who sign-up on any other day but the 1st will have the first period pro-rated. This means that they will be billed from the day they signed  
up until the last day of the month.

Susan signs up for her front page ad on January 10th. A new purchase order with a cycle date of January 1st and an active since January 10th is created. The next invoice will only include the 10th to the 31st period. Subsequent invoices  
will have full months included. 

!example1.png! 

{note}
Please Note: all this is done using *one* single purchase order.
{note}

*Cancellation in the middle of the month:*

Susan has a pre-paid monthly plan, so she has already paid $100 for the month of June. She calls on June 16th to cancel the service immediately. She should receive a credit for the remaining of the month (this means that the credit  
plug-in is in its place, see the 'Credits' section for more information).

To do this, the order needs to be edited. The 'Active Until' date needs to be changed to June 16th as it is the date Susan cancelled her services. The system will automatically create a new order with a negative price, June 16th as the  
'Active Since' date, and July 1st as 'Active Until' date.
 
!example2.png!

Having activated pro-rating, when the billing process runs, it will generate an invoice with a total of -50 dollars for the period of time that had been originally invoiced, but later had to be refunded to Susan because of the early  
cancellation. 

Because you only changed the 'Active Until' field of the original order, you will have a new order to represent the cancellation credit. The original order will now be in a 'Finished' state.

!statusfinished.png!

*Change of Service*

Even more common than signing up for a new service or cancelling an existing service is when a customer decides to changes a current service. Susan calls *Trend* on the 25th to upgrade her existing front page banner ad from a side bar to  
the top bar. This new ad of course, has a different price. Susan gets an invoice every 15th of the month with all the advertisement charges. 

First, the existing order for the side bar needs to end. You can do this by editing the order and adding an 'Active Until' with today's date (the 25th in the example). Then, you have to create a new monthly order with one product, the  
top bar ad. It will have a cycle date of the 15th. You don't need to edit the 'Active Since' date as it will take today's date as the default.

!example3.png!

The next invoice will show two charges: one for the side bar ad for the period of the 15th to the 24th, and another one for the item top bar ad for the period of the 25th to the 14th of the next month. In this example you are using a  
pro-rated end of period plus a pro-rated start period to replace a subscription. 

h3. Credit for Early Cancellations

When a subscriber calls to cancel one or more services, it could be that the cancellation is in effect for a period that has been already invoiced. If that is the case, you need to produce some way to credit the account. Another way to  
see it is that you invoiced too much, too soon, and a correction is needed.

This does *not* apply for orders that are post-paid. In this case, a cancellation will not affect a period that has been already invoiced simply because you invoice *after* the service has been provided. 

For example: if a monthly order is post-paid, and a customer cancels that order on the 15th of the month, changing the 'Active Until' date is all you need to do. The next invoice will cover the fraction of a period left in the order, and  
the order's status will change to 'Finished'.

If the order is pre-paid, then you might need to create a credit depending when the customer calls, and when the service should end. If the service should finish sometime within the next period, then you don't need a credit. If the  
service finishes earlier, within an already invoiced period, then a credit is necessary. 

*Activating Automatic Credits*

Credits are usually made on fractions of a period. This means that if you are cancelling a monthly order and credit is necessary, it is going to be for less than a full month. Because of this (the end period being only partial), you will  
need to first activate the pro-rating features, which is described above in its own section.

Activating automatic credits can be done with the addition of one Plug-In. Click on Configuration, then Plug-ins to access the plug-in configuration page.

By default, you will not be replacing an existing Plug-In, but adding a new one.

Add the following Plug-In:

@com.sapienter.jbilling.server.order.task.RefundOnCancelTask@

{note}
Please Note: for more information on how to add a Plug-In, please refer to Chapter 10: Configuration.
{note}

*Using Automatic Credits*

One the plug-in is configured; the system will create credit orders when appropriate. This is triggered by adding an 'Active Until' date. The new value for 'Active Until' must fall within an already invoiced date.

!automaticcredit.png!

In the above screen-shot, what date for 'Active Until' would trigger a credit order? It will have to fall *before* July 30, 2011. This date is also the 'Next day to invoice' as well as a date that is within the period that has been  
invoiced already. You would therefore have to change the date to something like: July 20, 2011.
 
When this order is edited with a new 'Active Until' date, two things happen: 

* This order's status is changed to finished, and a note is added.
* A new order is created to represent the credit.

The main parameters to the new order are:
* The order has all the items from the original (cancelled) order, but the prices are negative. 
* The credit order covers only the period of time that needs to be refunded. In this case, it is the last 10 days of the original subscription.
* The credit order comes with a note, to clarify why it was created. 

Partial order cancellations are also possible. If the quantity of an item is reduced in an order (or an item is deleted from it), and today's date is within an already invoice billing period, a refund is granted.

*Applying the Credit*

Once we have the purchase order created for us to represent the credit note, you need to decide what to do with it. There are a few possibilities. The one that is the best depends on the status of the latest invoice and if the customer  
remains subscribed to some other services or not. 

*The last invoices remain unpaid:* In this case, we can take the credit order and apply it to the latest invoice. You can do this by selecting the credit order and clicking on the 'Apply to Invoice' button. 
*The customer still has active orders:* In this case it might be best not to do anything. Just leave the credit order so that it will be picked up by the billing process and added to the next invoice. All the active orders will  
contribute products to the next invoice. This includes the current active subscriptions plus your new credit order. This alternative makes sense as long as the total of the next invoice remains positive. 

*The customer is no longer a customer:* If the customer has cancelled all their services, it means that they don't have any remaining recurring, active orders. What you do with the credit order will depend on the way your company deals  
with refunds. You can immediately generate an invoice (manually or with the help of the billing process), and then send a cheque along with the negative invoice to the customer. You could also have automatic payment processing setup with  
a payment gateway that will process negative amounts as refunds. See preferences 44-46 in Appendix A: Preferences for information on activating automatic negative payments (credits). 

*Fees for Early Cancellation*

Fees can also be generated when an order is cancelled. Fees are not only generated for cancellations within a period that has already been invoiced, but also for cancellations on future periods.

The 'Active Until' field of an order is used for cancellations. When an 'Active Until' field is moved forward to an earlier date, a fee is generated for every period that will no longer be invoiced. If the 'Active Until' date was empty  
instead, then a fee is only generated if the cancellation includes a period that has already been invoiced. 

Partial order cancellations are also possible. When the quantity of an order line in an existing order is reduced, fees can be generated.
 
The business logic for applying fees is handled by BRMS (business rules management system) rules. For more information, please refer to Chapter Rules and BRMS from the *j*Billing [Extension Guide| 
http://www.jbilling.com/documentation/jbilling-extension-guide].

*Rules for Fees*

See section: Item Relationship Management in the Chapter Rules and BRMS from the *j*Billing [Extension Guide|http://www.jbilling.com/documentation/jbilling-extension-guide] for more information about the RulesItemManager plug-in from  
which CancellationFeeRulesTask is extended.

*Data Model*

As CancellationFeeRulesTask is a subclass of RulesItemManager, the rules you create have available to them all the information related to the cancelled order, including order lines, user and contact details, etc. For partial cancellations, the only order line added to the Drools 'working memory' is the modified line, which has its quantity set to the amount of the item that was canceled.

*Helper Service*

The rules will have access to the helper service CancellationFeeRulesTask.FeeOrderManager, which is a subclass of RulesItemManager.OrderManager. The name of the global that is an instance of this class is also 'order'.

FeeOrderManager adds the following useful methods:

* void applyFee(Integer itemId, Double quantity, Integer daysInPeriod)

This applies the item as a fee with the quantity specified. daysInPeriod is used for calculating how many periods have been cancelled. The number of periods calculated to be cancelled is multiplied with the item quantity.

* void applyFee(Integer itemId, Double quantity) Applies the item as a fee with the quantity specified. A default period of 30 days is used for the number of periods canceled calculation.

* void applyFee(Integer itemId) Applies the item as a fee with the default quantity of 1.0 and period of 30 days.

* Date getNewActiveUntil() The order's original 'active until'.

* Date getOldActiveUntil() The order's new 'active until'.

*Example:*
The following rule applies fee 24 with the same quantity as the number of item 1 that were cancelled. Note that the item quantity is also multiplied by the periods cancelled. rule 'Cancel Item 
1 Fee'

When

OrderLineDTO( itemId == 1, $quantity : quantity )

then

order.applyFee(24, $quantity);

end

*Using Automatic Fees*

When an order is cancelled, a 'one time' order is generated with any fees applied by the rules.

Order cancellation can be total or partial.'
* A total order cancellation is achieved by moving the order's 'Active Until' date forward to an earlier date (which will generate fees multiplied by the number of periods cancelled). If the 'Active Until' date is empty, a total order  
cancellation can be achieved by setting an 'Active Until' date within an already invoiced period.
* A partial order cancellation is achieved by reducing the quantity of an item in an order (this includes deleting the item). If the 'Active Until' date has been set, the fee will be multiplied by the number of periods cancelled.  
Otherwise, if the order is currently within a billing period, fees for one period are generated. One order fee is generated for each reduced order line. 

h3. Browsing Purchase Orders

To view a list of your purchase orders, click on the Orders link. A list of all your purchase orders will appear in chronological order, starting with the most recent one. Click on a purchase order to view the details that relate to it.
 
*Details of a Purchase Order*

From here you can see all the details of the selected purchase order. There are four tables. 

*Order Details*

The first table reveals the order's core information, such as the date this order was created, what is its status (active, finished, etc.), the length of time each period covers, etc. Clicking on the User ID will link you to the  
customers screen.
 
!orderdetails.png!

An important field to note is, Next Invoice. This is a date that represents the first day yet to be invoiced. In other words, the next time this order is included in an invoice will be for the date shown in this field. This date is only  
relevant for recurring orders. When it is blank, it means that this order has not been included in any invoice yet.

Let's examine the above example. This is a monthly invoice, created on June 7, 2011. That same day, an invoice was generated, which included one month: from June 7, 2011 to July 7, 2011. Thus, the value of the 'Next day to invoice' is  
July 7, 2011 because that day is the first one not yet included on any invoice. 

*Notes*

This table allows you to create a note that will either remain private, or be printed on the invoice.

!notesorders.png!

*Products*

The third table lists the products contained in this purchase order, how many of each, and their price.

!productorders.png!

h3. Invoices

The last table relates to the invoices this purchase order might have generated. It helps you to see what was sent to a customer and when. If no invoices have been generated, than this table will be empty. 

!invoicesorders.png!

*ID*

This is the ID of the invoice where this purchase order has been applied. Clicking on the ID will lead you to the details screen of the invoice itself. 

!invoiceid.png!

*Date* 

This field represents the date the invoice was generated.

!invoicedate.png!

h2. Managing Purchase Orders

h3. Generate Invoice and Payment

The Generate Invoice and Payment features are located beneath the Invoice table.  This is the Manual way to generate an invoice from a purchase order, as opposed to invoices automatically generated by the billing process. 
When you click on the 'Generate Invoice' button, the system will attempt to generate an invoice and will redirect you to the invoice page so you can immediately get the invoice paid. 

!generateinvoice.png!

To immediately pay the invoice, click on the 'Pay Invoice' button. 

!payinvoice.png!

{note}
It is also possible to ignore the payment part and simply stop after the invoice has been generated. 
{note}

To understand the results of this manual generation, it is very important to consider that the system will use the billing period configured under Configuration to determine how far in the future it will 'see'. When attempting to  
generate an invoice, the system will define the period to bill. This period will start from the current date. The end will be the current date plus whatever period you have defined as the billing period in the process configuration.
 
Let's review some examples. Assume that today is July 1st, with a monthly pre-paid purchase order. The billing period will be one month. Therefore, the system will be trying to bill for the period of July 1 to July 31.
 
 {table}
*Active Since*|*Next Day to Invoice*|*Result*|*Comments*
July 1st | Blank | 1 period invoiced | An invoice for July is created.
July 20th | Blank | 1 period invoiced | The system is looking until the end of July. Since there is some billable time after July 20, it will generate an invoice for the period July 20 to August 19.
August 1st | Blank | 2 periods invoiced | There is some past time here to invoice. The system adds one period and reaches July 15, but after that there is still one period within the window July 1 to July 31, so another period is   included. Thus, the resulting invoice will include two periods from the order. 
July 1st | August 1st | No invoice generated | This purchase order's next day to invoice is beyond the period being considered. Keep in mind that it is only seeing until July 31. 
 {table}

h3. Errors When Attempting to Generate a Manual Invoice

It could be that the purchase order cannot generate an invoice. If that is the case, you will receive an error message. The following are causes and possible solutions of this error:

# The order is not an 'Active' status. If the order is suspended, you just need to edit the purchase order by changing the Status to 'Active'.
# The order has no billable time left and its status is 'Finished'. This will happen with a one-time purchase order that has already generated its invoice. It could also be that it's a recurring order with a set 'Active Until' date that has been reached. If that is the case, modify the 'Active Until' field to its new value, change the status of the order to Active and try again. You might want to consider  creating a new purchase order instead. 
# The 'Active Until' and 'Next day to invoice' dates are too far in the future. The solution could be to modify the billing period from Configuration. Please refer to the examples provided above for a more detailed explanation. 

h3. Too Many Periods Added to the Invoice

This could happen when the 'Active Since' date of the purchase order is backdated. You can see examples of this in the sections above. There are many ways to solve this. Let's go through a few of them, mostly to illustrate how the many  
order/configuration billing parameters work together.

Let's start with the easiest way to change the process configuration 'Maximum Periods to Invoice'. This parameter puts a limit of how many periods from a purchase order can be included in a single invoice.
 
!maxperiodsinvoice.png!

Another way is to change the billing period from the process configuration to a shorter period. For example: from 1 month to 1 week. This way, you are shortening how far in the future the system will try to invoice. 

!billingperiodmonth.png!

!billingperiodweek.png!

{note}
Please Note: once you have generated the invoice, make sure you remember to rollback your changes to the billing configuration.
{note} 

Additionally, you could temporarily set the 'Active Until' date of the purchase order, generate the invoice and then edit the purchase order to remove the 'Active Until' date. 

For example: today, being July 1st, you have a pre-paid monthly purchase order with an 'Active Since' of May 1st. You can set the 'Active Until' date to May 31st, then generate an invoice (only one period will be included), and then edit  
the purchase order to remove the 'Active Until' date. 

*Apply to Invoice*

This feature allows you to directly apply a single Purchase Order to an existing invoice. Click on the 'Apply to Invoice' button. 

!applytoinvoice.png!

The purchase order must comply with the same requirements as if you were generating a manual invoice. See the previous section for a description of these requirements.

{note}
Please note: *this is the only way to modify an existing invoice*, since you cannot directly modify invoices manually. This feature should be used to fix an error. 
{note}

A common situation for this feature is the following: a customer has received an invoice with incorrect information on it. You agree to fix this invoice and do so by creating a one-time purchase order that reflects the changes. You then  
apply the purchase order to the existing invoice. Since this is a one-time purchase order, it will not be included in any further invoices. 

*Edit a Purchase Order*

To edit a purchase order, click on the Orders link, select the order you wish to edit and scroll down to the bottom of the screen. Click on the 'Edit this Order' button. When you are finished making your changes, click on the 'Save  
Changes' button. You will be returned to the Orders screen.

!editorder.png!

*Suspend / Activate an Order*

While you are editing a purchase order, it is also possible to change the status of an order. Changing the status will cause the purchase order to either start or stop generating invoices. Click on the drop down menu beside Status and  
select either Finished or Suspended. Click on the 'Save Changes' button to save your changes. 

!status.png!

*Delete*

To delete a purchase order, click on the Orders link, select the order you wish to delete and scroll down to the bottom of the screen. Click on the 'Delete' button. The order will be removed from the list on the Order screen. 

*Order Periods*

Purchase orders always have an order period assigned to them. This determines how often the purchase order will generate an invoice. Non-recurring purchase orders will have one-time as an order period. When you create a new purchase order, you will be selecting the billing period from a drop down menu. You can use any number of days, weeks, months, or years as billing periods. 

How to add and modify the options in this menu is explained in this section. To access the order periods click on the Configuration link, and then on Order Periods, which is located on the side bar on the left hand side of your screen.
 
*Adding a new order period*

If you want to have an additional order period, click on the row with the ID; New. Fill in the following fields:

!addneworderperiod.png!

* Value: How often the customer will be charged per Unit (1 = charged once for the month, day, week and year).
* Unit: a drop down menu with Month, Day, Week and Year
* Description: a one word summary of what the purchase order is based on the Unit. (the unit: month = description: monthly.)

To save your changes, click on the 'Save Changes' button.

*Edit*

You can change an existing order period by entering a new value on the name, value or description fields. To save your changes, click on the 'Save Changes' button.

It is important to consider the implications of changing an order period that is currently being used by active purchase orders. All the purchase orders that are using the order period will be affected by these changes. 

For example: if you have purchase orders that use an order period that is 1 month, and then change that order period to 3 months, all the purchase orders will generate invoices in a 3 month period instead of the monthly period. Even if  
this is the desired effect, keep in mind that it would be very confusing for someone in the future to understand your billing history. 

*Delete an Order Period*

If you have billing periods that are not in use, you should delete them to avoid making mistakes when creating a new purchase order. 

To delete an order period, click on the red 'x' beside the line you want to delete. 

!deleteorderperiod.png!

{note}
Please note: you will not be able to delete a billing period that is currently assigned to a purchase order. 
{note}




h1. CHAPTER 4: THE BILLING PROCESS 'Automating Invoice Generation and Payment Processing'

h2. How the Billing Process Works

*j*Billing is a powerful billing system, designed to help you save time as you will only need to configure it once. After that, you can let it automatically generate your invoices, and perhaps process payments for these invoices. You won't have to think about your billing, or do anything else but create purchase orders for new sales, and monitor that everything is going as you expect. It is very flexible, and its configuration can easily be modified and adjusted as you get to know the system, and as your company grows. 

The billing process is at the very core of *j*Billing. To configure this critical process, it is important to understand how it operates and to know its different parameters and options.

The billing administrator of your company will configure *j*Billing and schedule the billing process to run periodically. The period for this schedule can be of any length of time (weekly, monthly, etc). Alternatively, the administrator can, at any time, manually set a date for the next billing process, overruling the date automatically calculated by the system.

In addition to generating invoices, the billing process will attempt, (should you select the option) to process payments cleared by credit cards and direct debit by communicating with a payment processor, which will proceed with the payment the moment an invoice is generated. This additional step of processing payments immediately after the generating of invoices is called: Automatic Payment Processing. 

h3. The Billing Period

The billing period is: *the single most important parameter to configure.* It will determine how often the billing process runs, and therefore, how often invoices are generated. A monthly billing period will run once per month, a weekly one, once per week and so on. This seems quite simple, but has a very important result: *it's the amount of time the process will 'see' into the future.*

The billing process looks into a specific period of time for purchase orders that should produce an invoice. If the process runs on January 1st and the period is set for one month, then the process will generate invoices for any purchase order that has billable time falling on any day of January. To understand what billable time is, let's take a closer look into the way the billing process selects a purchase order to create a new invoice. 

h3. Selecting Purchase Orders

Although the billing period defines how *often* invoices are generated, it has nothing to do with how *many* invoices are generated. Whether an invoice is created or not depends exclusively on what purchase orders a customer has. 

For example: let's say that you have a weekly billing period, and a monthly, pre-paid purchase order. In this example, set the start date as January 1st. 

* The purchase order is created with 'Active Since' date of January 1st.

* On January 1st, the billing process runs. Since the billing period is set as weekly, the period of the run is from January 1 to January 7. It generates one invoice for the purchase order, but since this is a monthly purchase order, the invoice will cover the period January 1 to January 31.

* On January 8, the billing process runs again. This time for the period of January 8 to January 14. The purchase order does not hold billable time during this period. When you notice the purchase order's details, you find the 'Next day to invoice' field, set as February 1. Therefore, no new invoices are generated for this purchase order. 

* On January 15 and 22 the billing process runs, with the same result as the previous run. There will be no new invoices. 

* Only on January 29 does the billing run generate a new invoice. This is because the billing period covers from January 29 to February 5. Since the purchase order has billable time starting on February 1, it will produce a new invoice.
 
The billing process will generate one invoice per customer (to see the exception to this rule, please refer to the Due Dates section of this guide). What if the customer has many purchase orders with billable time? The process will still generate only one invoice, which contains all the items belonging to all applicable purchase orders.
 
Let's take the previous example and add a one-time purchase order to it, on January 20. Being a one-time purchase order, it will not recur. On January 29, the billing process runs, but this time it finds two purchase orders falling in its time range. It will still generate one single invoice for this customer, but the new invoice will display the changes from both purchase orders. 

h3. Purchase Order's Periods Included in Invoices

The billing process will normally include one period of the purchase order when it generates a new invoice. In the previous example, it included one month. However, the rule is that it will include as many periods from the purchase order as it can fit in the billing period. 

Let's take another look at the previous example, but this time, extend the billing period from one week to two months. This will create more 'room' to include more periods from the purchase order. This time, when the process runs on January 1st, it generates one invoice from the purchase order, but with two months worth of charges instead of one. This happens because the period of the run now includes from January 1 to February 29. The run can fit two of the purchase order periods (two times one month) within its scope.

For example: *Trend* has a customer that has been advertising since January 1st. However, there was a misunderstanding, and the purchase order wasn't created. On March 1st, the error is discovered and the purchase order is finally created, *but* with an 'Active Since' backdated to January 1st. This is a pre-paid monthly purchase order for a total of $100. When the billing process runs on March 15, the invoice for this customer is for a total of $300. 

Here's why:

* The billing run takes place on March 15; its period is weekly so the time span runs from March 15 to March 21.
* The billing process takes this purchase order and starts including periods from it, in an invoice, until it has no more billable time left *before* March 21.
* After adding three periods (months) to the invoice, the 'Next day to invoice' becomes April 1st. The process does not add any further periods to this invoice, since the 'Next day to invoice' date is now *past* the end of the billing run scope (March 21).

h3. Selecting the Right Billing Period

There are a few factors to consider when selecting the billing period. There is no such thing as a 'correct way' to determine the billing period. It will depend on your business rules and your customers' expectations. The following are set of guidelines, provided to help you in making a decision.

An important factor to consider is the periods of your purchase orders: 

*The billing period should be no greater that the shortest period of your recurring purchase orders.* 

For example: if you have some purchase orders that generate invoices on a weekly basis, you *do not* want to have a billing period longer than a week. Even if your weekly purchase orders are a minority, and the rest are all monthly. You want to match your billing period to the shortest of your purchase order's period.

Another important factor to consider is how you want to manage your billing schedule.

Do you prefer to have a single monthly billing day? This translates to one day in the month when all the invoices are generated. All your customers will receive their invoices the same day. The other option you have is to bill your customers depending on *when* in the month they initially subscribed to your services.

{note}
Please Note: these two options define *when* and *how many* invoices are created in the billing run. They do not define *how often* any single customer receives her invoice. How often a customer receives invoices is determined only by the period of their purchase orders. 
{note}

Let's explore the billing process configuration a little further. You have two basic choices.

For example: *Trend* sells ad banners and invoices to its customers monthly, which means that all the recurring purchase orders are monthly.

*Single Monthly Billing Day:*

On the 1st of each month, all of *Trend's* customers receive an invoice with the current charges. The billing period is, therefore, 1 month. However, what if a customer signs up in the middle of the month? If you create a purchase order, and it is left to the process to generate invoices, it could take a few weeks for it to generate the first invoice.

*Trend* does not want this. The company terms state that all purchases are to be pre-paid. Therefore, they want to invoice and get paid immediately. Also, if left as is, when the process runs, it will include two periods from the purchase order in the first invoice (see the previous section to know why). This is not what the customer expects.

The solution for this is for *Trend* to create a one-time purchase order with pro-rated charges until the end of the month. Then a recurring purchase order with an 'Active since' dated for the first day of the following month. If a customer signs up on January 15 for a $100 ad, they will require *Trend* to set up the following:

* A one-time purchase order for 50$ (half the monthly charge, since the customer is registering halfway through the month).
* A monthly purchase order for 100$, with an 'Active Since' date of February 1.
* Since *Trend* wants to get paid immediately for the 50$, a manual invoice has to be generated by clicking on the link 'Generate invoice and payment' found on the purchase order screen. Otherwise both purchase orders will be picked up by the process on February 1, and one invoice for 150$ will be generated.

*Several Billing Days in a Month:*

*Trend* sets their billing period to one week. Remember, customers will still receive one invoice per month because the purchase orders are monthly. When a new customer signs up, a single monthly purchase order is created. Since the process runs every week, only a few days will pass until the customer receives their first invoice. After that, the customer will receive one invoice per month, around the same day every month.

Let's compare this set-up to the previous scenario. With this billing period, there is no need for a one-time purchase order to reflect the fraction of an initial period. Invoices are generated weekly, so there are about four billing runs per month. In the previous scenario there was just one monthly run. Thus, in this scenario, each run will generate about a quarter of the invoices compared to the previous choice. This is due to the fact that the total number of generated invoices remains the same when the whole month is considered.

Even though the purchase orders are all monthly, a weekly billing period is a very good alternative for *Trend*. At first glance, it is easy to assume that billing customers the first day of every month should be the simplest configuration. As you will have noticed for *Trend*, it is much more complicated to configure it that way, because of the handling of customers who sign up on different days of the month.

As the example demonstrates, a weekly billing process reduces complexity. Although each customer can have a different billing day, *j*billing will take care of invoicing each of them at the right time.

h3. Invoices Carried Over to Other Invoices

By default, when the billing process generates a new invoice, it will include any previous overdue invoice. In other words, an invoice that remains unpaid when the next invoice is being generated is going to be carried over to the new invoice. This way, your customers can pay their latest invoice and bring their accounts up-to-date, even if they had failed to pay a previous invoice.

When the billing process runs and it is generating a new invoice for a customer, it checks if this customer has any overdue invoice remaining unpaid. If that is the case, it will add a line to the new invoice (for each of the overdue invoices) with the information from the overdue invoice(s) carried over.

When this happen, the following fields will be affected:

* The new invoice will have a 'Carried balance' with the amount that was taken from the overdue invoice.
* The overdue invoice will be marked as 'paid'. It no longer needs to be paid because its balance has been transferred to the new invoice.
* The overdue invoice will also show 'Delegated to invoice' followed by the ID of the new invoice.
* The balance of the overdue invoice is now 0.

h3. Due Dates

When an invoice is generated, the system assigns it a due date. This date is calculated by adding the period of time you configured under Configuration, to the billing process date. 

For example: if the billing process is running on October 1, and the configured due date is 1 month, the resulting invoices will have November 1 as their due date. If the configured due date is 30 days, the result will be October 31.

It is possible to override the due date for a specific customer. These are optional values. If you enter 1 month for the billing process due date configuration (companywide), but then create a customer with a due date of 90 days, the latter value will take precedence for that customer only.

!billingperiod1month.png!

!duedate90.png!

The same applies at the purchase order level. You can enter a due date value that will apply to that specific purchase order, regardless of that particular customer's due date, or the company wide due date's value. 

{note}
Please Note: what happens if two purchase orders should be included in one invoice, but the two purchase orders have different due dates? In such a case, the system will generate one invoice per purchase order, each invoice with its own due date.
{note}

h3. Automatic Payment Processing

As part of the billing process, *j*billing can attempt to get your invoices paid with credit card numbers, as soon as they are generated, by using an ACH (Automatic Clearing House). This is done through a payment processor.

Automatic payment processing works by connecting to a payment processor that handles the payment authorization. This means that you need an account with a payment processor before this feature can work. *j*billing needs to know about the type of account that you have and the parameters of it. Please see Chapter 10: Configuration for more information.

*j*billing will submit the transactions to this payment processor, which will reply with the result of the transaction.

Depending on your notification preferences, the billing process will send an email to your customers with the result of the payment, which could have either:

* failed, or 
* been successful

If a customer does not have the information necessary to submit the payment (a credit card for example), the billing process will not attempt the payment.

There are many reasons why a payment can fail: the credit card is suspended, or expired. It might be maxed out or have an invalid name. Other problems might be on the payment processor side: it might be temporarily unavailable or simply, just not working properly. In any case, it is good practice to retry a payment before taking action by suspending a customer's account.

*j*billing can retry those payments that were failed by the payment processor when the automatic payment processing took place. You can choose how many retries you want, and how many days have to go by in between those retries. These configuration parameters are covered in the next section.

Normally, you will have *j*billing configured to send notifications with the result of an automatic payment. Typically a failed payment will result in an email being sent to your customer, stating that the invoice remains unpaid. There is a good chance that the problem can be solved in only a few days, just before the retry takes place. By setting up automatic retries in *j*billing, the payment can be received without your intervention.

h3. Configuration of the Billing Process

There are a few parameters that will determine how your billing process will run. To access your billing process configuration click on the Configuration link and then the Billing Process link located on the left hand side of your screen. 

!configbillingprocess.png!

The Billing Process screen will appear.

!billingprocessscreen.png!

*Next Run Date*

This is the date when the billing process is schedule to run. Right after installing *j*billing, you'll need to enter a date in this field. This is the date at which the very first run of your billing process will take place.

!nextrundate.png!

You need to enter this date only once, to override the installation's default value. Once the first run has taken place, the date for the next run will be automatically updated by the system.

{note}
Please Note: It is possible to manually specify a date for the next billing run at any time. This should not be necessary under normal circumstances, but it is a feature that can come in handy if needed. Should you chose to manually change the date of the next billing run, the new date you enter will overrun the one that had been automatically selected by the system, in accordance with your last configuration. The system will thereon process the billing run according to this new date.

For example: It is September 2011. *Trend* for whom *j*billing has been automatically generating invoices on the first of every month, decides to change the 'Next Run Date' to September 15th 2011. From then on, *j*billing will automatically generate invoice on the 15th of every month (assuming a 'Billing Period' of 1 month).
{note}

*Generate Review Report*

This flag indicates to the system that it needs to run a preview of the billing process before the real process takes place, and invoices are sent to your customers. The Review Report is like a 'pretend' run. It is a great tool to help identify any problems with the invoicing before the run actually happens. It allows the Billing Administrator, should mistakes or inaccuracies be noticed, to apply changes to purchase orders, edit customers' contact information, enter payments, modify the description of an item or its price, etc.

!genreviewreport.png!

It is recommended that you set this flag 'on', at least for the first few billing cycles if you do not wish to review reports continuously. The Review Report does not generate real invoices. To view them, click on Billing, and select the report you wish to review.

!billinglink.png!

*Days to View Report*

How many days before the real billing process do you want the Review Report to be generated? In other words, how many days before the value in 'Next Run Date' do you want to review the process? 

The greater the number of days, the less accurate the report will be. For example: if the Review Report runs 15 days before the billing process, there are likely to be payments or purchase orders created during that period of time, and you will not have had an opportunity to review how these transactions affect the invoices generated. A good number of days to start with is 5.

!daysreviewreport.png!

For example: *Trend* turns the flag 'on' for the system to generate a Review Report, and indicates it wants it done 5 days before the billing run. Considering that the next billing process will run on the 1st of July, the Review Report for the month of July will therefore be generated on June 25th.

h3. Number of Retries

Some of your customers, or all of them, might have opted for the automatic payment processing option (either by using a credit card number or by direct debit). 

!autopaymentprocessing.png!

In these cases, *j*billing will proceed with clearing the payment the moment an invoice is generated. Should this attempt to process a payment fail, *j*billing can try again.

!numberofretries.png!

In this field, you specify how many retries you want the system to perform. You can find more information about payment retries in the 'Automatic Payment Processing' section of this document.

For example: *Trend* has many customers who's invoices get automatically paid for every time new ones are generated. It happens that one customer has a problem with its bank account, or that another one has not renewed their credit card, therefore, *j*billing's attempt to clear the payment fails. *Trend* indicated to the system that it should retry 2 times to clear a payment.

*Number of Days Between Retries*

Enter here how many days you wish to have in between retries. It is recommended to allow for enough time in between the retries for your customers to sort out whatever difficulty might have prevented the first payment from being cleared.

!daysbetweenretries.png! 

For example: *Trend* enters 5 days in between the retries (therefore, a first retry on the 5th of the month and a second one on the 10th). 

This also means they have set up a total of three attempts to receive payment: the initial one with the original billing process, plus two retries.

*Billing Period*

When the billing process takes place, the system looks ahead for the period of time specified during the configuration of the system. The system will generate an invoice for any purchase order containing billable time that falls within this period of time. The system allows for this period to be any length of time (weekly, monthly, etc even daily).

!billingperiod.png! 

You don't want this period to be too long. It is too long when some invoices can get more than one period of time from a purchase order. On the other hand, a period is too short when you have unnecessary runs that produce no invoices.

For example: *Trend* sells banners of advertisement displayed on the Internet. Some are sold in one week packages, others in one month packages and yet others in 3 month packages. These services are all pre-paid and are generally hired over many cycles. Thus, for *Trend* a one week billing process is a good choice: it is the shortest period of any of their purchase orders.

*Due Date*

The Due Date is the period of time your customers are given to pay their invoice before it becomes overdue. This field here represents the default Due Date, companywide.

It is possible to override this Due Date for a customer in particular to whom you wish to give a unique one (either when creating a new customer, or when editing the information for an existing one). This can also be done at the Purchase Order level, where you assign a particular Due Date for one Purchase Order in particular (either when creating a new Purchase Order, or when editing the information for an existing one), which will override the other ones.

!billingprocessduedate.png!

See the 'Due Dates' section of this chapter for more information.

*Require Recurring Order*

If this box is checked, the system will generate an invoice for a customer *only if there is at least one recurring Purchase Order* included in the invoice. This will prevent the system from generating invoices for one-time Purchase Orders (probably with small totals), and force it to include them in the invoices including recurring Purchase Orders.

!requirerecorder.png!

If your customers expect an even flow of invoices, say one per month, you might need to have this box checked. This would prevent the billing process to generate an invoice in the middle of the month for a one-time purchase order. This one will be later picked up along with the recurring monthly purchase order.

For example: *Trend's* customers receive their invoices on a monthly basis, the 1st of each month. This does not prevent them from making one-time purchases at anytime during the month. *Trend* finds it easier to collect payments when the invoicing remains simple: one invoice per month per customer. Therefore, Trend does not want these one-time sells to generate invoices of their own. They want the one-time sells to be included in the monthly invoices along with the regular recurring fees. In this case, they will turn 'on' the Require Recurring Order option.

*Use Process Date for Invoices*

If this check-box is set: *all the invoices generated by the billing process will be created with the same date as the billing process.*

!processdateinvoice.png!

If this check-box is not set, the date of the resulting invoices will be taken from the purchase orders included in each invoice. The period from the purchase order being included in an invoice will be the main factor for the invoice date.

Let's explore some examples where you would set the 'Use process date for invoices' field to 'on':

{table}
*Period Being Invoiced from the Purchase Order*|*Billing Process Date*|*Invoice Date*
July 10 - August 9 | July 8 | July 10
August 10 - September 9 | August 11 | August 10
September 10 - October 9 | September 9 | September 10
{table}

In all cases, the invoice date is equal to the first day being invoiced. As you can see, what determines the invoice date is not the billing process, but the period that is being included from a purchase order.

If many purchase orders are being included in a single invoice, the earliest period from a recurring purchase order will take precedence. This means that if you have a recurring purchase order generating invoices, with some one-time purchase orders included as well, the date to set the invoice date will be taken from the recurring purchase order only.

The invoice date is very important, because the due date of the invoice will be calculated based on the invoice date.

h3. Automatic Payment Processing

As part of the billing process, Sapienter can attempt to get your invoices paid as soon as they are generated by the billing process. This is done for payment methods such credit cards or ACH (automatic clearing house). Sapienter will submit the transactions to a payment processor, which will reply with the result of the transaction.

!autopaymentprocessing.png!

The billing process will send an email to your customers with the result of the payment, which could have either failed, or been successful. If a customer does not have the information necessary to submit the payment (a credit card for example), the billing process will not attempt the payment.

{note}
There is more information about automatic payment processing in the previous section.
{note}

h3. Maximum Periods to Invoice

This parameter sets a limit on *how many periods from a purchase order will be included in an invoice*. It applies only to recurring purchase orders. Under normal circumstances, you will always have just one period going into a new invoice. 

!maxperiodsinvoice.png!

For example: from a new monthly purchase order active since June 1st, the month of June is billed in the first invoice.

However, when you are entering a purchase order that is backdated, you might want several periods to be included in an invoice. In the previous example, if the current date was August 15, you might want the first invoice to include June, July, and even August if the order is pre-paid.

By setting this parameter to 1, the system will never try to 'catch-up' with the billing of a backdated order. Higher values will allow for this up to the number specified.

h3. Apply Over Payments to Invoices

By using this option, the system will *automatically link new invoices to payments that have some balance left*. If you receive a payment that exceeds the latest invoice, or receive the payment in advance, you can use this option to automatically apply the balance of that payment to future invoices.

!applytooverpayments.png!

When an invoice is generated (either manually or by the billing process) the system will verify if the related customer has payments with a balance greater than zero. If that is the case, it will use those payments towards the payment of the new invoice. A payment can have a balance greater than zero when it has been created without linking it to an invoice, or when its amount is greater than the balance of the invoice that was linked to.

Let's take a look at an example: one of *Trend's* customers receive a $100 invoice every month. This month the customer, by mistake, sent a cheque for $150. Since it is more trouble to send the cheque back and get a new one for the right amount, it's been agreed that the extra 50$ will go as a partial payment for the next invoice.

By turning the 'Apply over payments to invoices' option on, *Trend* doesn`t do anything special about this situation. It will simply enter the $150 payment and link it to the current invoice. Next month, a new invoice for $100 will be generated. But this time it will be already linked to a payment and will have a balance of just $50.

H2. Viewing the Process Results

Once the billing process has run, you will want to know what happened: how many invoices were generated? How many were paid automatically? Etc. In the future, you might also want to take a look at the results of previous billing processes.

h3. The List of Billing Processes

To view the list of all the billing processes generated for your company, click on Billing. Each record in this list represents a billing process cycle. By clicking on any of them you will get its details.

!billingprocesslist.png!

h3. Examining the Latest Billing Process

The latest billing process will appear at the top of the list. To view the latest billing process, click on it. As you can see below, the billing screen contains many details related to your latest billing process.

!billing.png!

To help you better understand this information, the next section of this guide will review and provide a brief description of the fields you will see here.

*ID* 

This number is automatically assigned by the system to uniquely identify a particular billing process.

!billingprocessid.png!

*Billing Start / End Date*

These dates refer to the *period of time* that has been billed, as opposed to *when* the billing took place.

!billingstartend.png!

*Number of runs*

This field refers to the billing run that took place. Should this number be higher than '1', it indicates how many times *j*billing re-tried to process payments that failed at the first attempt.

!numberruns.png!

*Start / End Date*

These fields reflect the length of time it took for the billing process to run.

!startendrun.png!

*Payment Processing Ended*

This field displays the date and time that the payment processor finished receiving payments.

!paymentprocessingended.png!

*Result*

This field displays whether or not the billing process ran successfully.

!billingresult.png!

*Users*

This section will display the number of users whose invoices have succeeded, and failed.  

!usersbilling.png!

*Invoices*

Displays the number of invoices, and orders the billing run generated. Click on the numbers to display the list of invoices or orders.

!billinginvoices.png!

*Total Invoiced*

This field will list the total amount invoice for that particular billing run. 

!totalinvoiced.png!

*Total paid*

Refers to the amount *j*billing successfully processed automatically, adding up all the runs, using a payment processor. These are payments that the processor has confirmed as 'good'.

!totalpaid.png!

*Total not paid*

This total includes the payments that did not get paid. It could be that the payment was attempted using a payment processor, but it was rejected (for example, an expired or maxed out credit card). It could also be that the customer did not provide a payment method that allows for automatic processing, such a credit card or ACH, and will pay by cheque instead.

!totalnotpaid.png!

*Currency*

Will display the currency used in your billing process.

!currencybilling.png!

h3. Runs

These sections detail what happened during the initial billing process, and then, if applicable, the subsequent runs that were, in fact 're-tries'. In the example illustrated in the screen shot, there is only one run: the initial billing process. If there are other runs, they can only be retries. Retries do not generate invoices. They only try to get the invoices still unpaid, paid through a payment processor.

* The Total Invoiced represents the sum of all the invoices generated during the billing process. In our example, one invoice was generated.
* Total Paid is the total in payments that *j*billing's automatic payment processing successfully cleared.
* Total Not Paid is the money *j*billing's was not able to collect through a payment processor.

h3. The Process Review Report

The Review Report is a *pretend* billing run. It normally runs a few days before the genuine billing process. You decide if the review report will be generated, and if so how many days before the real process, using the parameters in the billing process configuration.

{note}
Please Note: as the review report is *not* a real billing process, it does *not* send invoices to your customers, nor does it process payments. 
{note}

Should mistakes or inaccuracies be noticed, the administrator can then apply changes to purchase orders, edit customers' contact information, enter payments, modify the description of an item or its price, etc. Since the Review Report does not generate true invoices, the only way to view these simulated invoices is by clicking on Billing. Find and click on the Review Report. 

!billingreview.png!

The Review Report, once generated, can be in one of three states:

* Neutral: The system has generated the Review Report and is waiting for the Billing Administrator of your company to either approve or disapprove it. If left ignored, your real billing process will *not* run. Your Billing Administrator will then receive an email on the day your Billing should be processed. It will warn them that the approval of the Review Report is required in order to allow the billing to run as planned.
* Dis-approved: The Review Report was generated and dis-approved by your Billing Administrator. Whether changes to the purchase orders are applied or not, the system will automatically generate another Review Report within 24 hours. This report will once again need to either be approved or dis-approved. This allows you to verify that the system interpreted the changes you may have applied.
* Approved: The Review Report was generated by the system and approved by your Billing Administrator. If the Review Report was approved before the date planned for your next billing run, your billing process will move forward as planned.

In short, once a Review Report is generated, *it needs to be approved before your billing will be allowed to run*. If left to Neutral, it will prevent the system from generating the real billing run (the one that will actually send invoices to your customers) from occurring.

{note}
Please Note: once the Review Report is generated and is waiting for a response, (and before it is approved) it is possible to apply changes to purchase orders or customers' files and then simply approve it. *This is not a recommended process*. If you have made changes that will affect the results of the billing process, you should disapprove the review so it runs again. Then, once the system has generated another Review Report, verify that the changes show up the way you expected. 
{note}

It is important to remember that *the real billing process is not based on the review report itself*. It is based on other documents: purchase orders, invoices, payment etc., and their status at the *moment that the billing process runs*. If you enter any data that would affect the billing process, for example, a new purchase order, then this will be considered by the billing process regardless of the status of the review report.

Let's see an example of this: the review report runs, and shows that 10 invoices are going to be created for a total of $1000. You approve this report to allow the billing process to take place. After this approval but *before* the real billing process takes place, you enter a new order for $100. The review report that you approved will still shows 10 invoices for $1000; yet, when the real billing process runs, you will get 11 invoices for $1100.

The billing process can be the same as the review process only if *no* data has changed in between each run. This might not be realistic, depending on the size of your customer base. On one hand, *you want the review process to run right before the real process*, minimizing the time in between. This will prevent the situation described above. On the other hand, you need some time in between the review process and the real one to fix any issues found during the review process. The actual days in between these two processes depends very much on your business rules.





h1. CHAPTER 5: INVOICES
h2. Overview 
An invoice is a list of services rendered to your customer, containing prices and charges. Any invoice will feature: the name of your company and your contact information, the name of your customer, their contact information, the invoices number and ID, the date at which it was issued, its due date, whether there is a carried overbalance, and so on.

Sometimes an invoice will reflect the items of a corresponding purchase order, while in other cases, it will include additional charges not directly related to a purchase order, such as taxes, additional fees, special discounts, late payment fees, etc.

An invoice can be represented in the following ways:

* Web (HTML): The HTML representation is the one you can see in your web browser, when using the web-based graphic user interface of *j*billing.
* PDF: The PDF version is normally called a 'paper invoice', because this is version is the one used for printing invoices. Paper invoices can be customized to match your company's corporate image.
* Email: You can write the text of an email, using variables to represent values such as total, due date, etc. Invoice emails can optionally have an attachment of a PDF version of the invoice as well. The email representation of an invoice is handled by *j*billing as a notification. Please see the notifications documentation for more information.

h2. The Relationship Between Purchase Orders and Invoices

In *j*billing, it is very important for you to be able to trace the key series of events for a billing process. Billing information accumulates over time, creating a history of events with your customers. *j*Billing wants you to know when something happened, and most importantly, why. When a customer is sent an invoice, this is done because they have bought something from you. These items are listed in the invoice.

In *j*billing, the event of the purchase is backed by the purchase order document. Therefore, there cannot be an invoice without at least *one* purchase order. Payments and invoices have a similar relationship: a payment should pay an invoice. There should not be a payment without first having an invoice.

!purchaseorderinvoicepaymentdiagram.png!

h2. Creating Invoices

Since invoices can only be created based purchase orders, they need to be created first. Once you have purchase orders, the invoice can be generated in two ways:

# The billing process generates an invoice automatically (please refer to Chapter 4: The Billing Process for more information).
# An invoice is created manually (please refer to Chapter 3: Purchase Orders for more information).

h2. Modifying an Invoice

An invoice cannot be edited directly. For example: you cannot quickly change the total of a quantity. If you could do this, you would lose the traceability of the purchase order - invoice relationship.

The only way to modify an invoice is by creating and applying a new purchase order that will either cancel out or correct the erroneous invoice. For more details, please refer to Chapter 3: Purchase Orders. 

h2. Deleting an Invoice

To delete an invoice, click on Invoices. Click on the invoice you wish to delete, and then on the 'Delete Invoice' button, located at the bottom of the screen.

!deleteinvoice.png!

You are then asked to confirm this choice. Please keep in mind that once an invoice has been deleted, it is deleted permanently.

!suredeleteinvoice.png!

Once an invoice has been deleted, the purchase order that had generated the invoice in the first place, gets automatically modified to the status it held before the invoice was generated.

For example: an invoice is generated out of a one-time purchase order. This one-time purchase order's status will then change from 'Active' to 'Finished'. When the invoice is deleted, the status of the purchase order will go back to 'Active'. The purchase order will probably generate a new invoice again if not modified.

h2. The Invoice Details Screen

To view an existing invoice, click on Invoices. Then, click on the invoice of your choice. The invoice details page is displayed on the right hand side of the screen:

!invoicedetails.png! 

Let's take this invoice as an example and analyze the data:

*User Information*

This section of the invoice lists information about the customer that owns the invoice. You will see: the user's full name, user id, and user name.

!invoiceuserinfo.png!

*Invoice ID*

The invoice ID is an automatically generated and assigned to the invoice by the system.

!idinvoice.png!

*Invoice Number*

This is the number of invoices currently generated by the system. In the example above, it is the 1024th invoice generated. In the example below, it is invoice number 6.

!invoicenumber.png!

*Status*

This field lets you know if the invoice has been Paid, or if it is Unpaid. 

!invoicestatus.png!

*Invoice Date*

In all cases, the invoice date is equal to the first day being invoiced. What determines the invoice date is not the billing process, but the period that is being included from a purchase order.

!dateinvoice.png!

*Due Date*

This field shows the date that the payment for the products on a particular invoice is due. 

!invoiceduedate.png!

*Generated Date*

This field displays the date that the invoice was generated.

!generateddate.png!

*Amount*

This is the total the user has to pay for the purchase order(s) included with the invoice.

!invoiceamount.png!

*Balance*

This field displays how much of the invoice remains to be paid. 

!invoicebalance.png!

*Carried Balance*

If a positive or negative dollar amount needs to be carried over from another invoice, it would show up in this field.

For example: a customer receives a invoice for $150. They only pay $100. The $50 they did not pay will show up on in this field on their next invoice. Another example would be if a customer requires a refund. The refund amount would be reflected in their next invoice. 

!carriedbalance.png!

*Payment Attempts*

This field will display how many times the system has tried to get the invoice paid. 

!paymentattempts.png!

*Orders Included*

Clicking on the link provided in this field will allow you to see the purchase orders attached to the invoice. 

!ordersincluded.png!

*Invoice Lines*

This pane displays the lines that will appear on the invoice. This example only has one line. However, it is also likely that you will also have invoices with multiple lines that reflect the different purchase orders, products and even taxes. 

!invoicelines.png!

*Payment and Refunds*

When the invoice has been paid, the system will create an event, which will show particular details of either how it was paid or refunded. 

!payandrefund.png! 

*Download PDF*

You can download a PDF version of this invoice by clicking on the 'Download PDF' button. This is usually done by customers to get a hard copy of the invoice. 

!downloadpdf.png!

*Send as Email*

You can email the invoice to the customer by clicking on the, 'Send as Email' button.

!sendasemail.png!

h2. Numbering

The system will, by default, apply the number 1 to your first generated invoice. If, however, your company has generated previous invoices from a legacy system, it is necessary to tell the system what number the first invoice it generates for you should be.

!configinvoicenumber.png!

Invoices will be generated using the number that you provide. The system will increment this number by one for every new invoice. You also have the option of adding a prefix to your invoice numbering. This prefix can have up to 20 characters and can be any digit, letter or symbol. 

To configure the number of your first invoice, and perhaps the prefix to your invoices, click on Configuration, then Invoice Display. You can update the invoice numbering at any time.





h1. CHAPTER 6: MEDIATION

h2. Overview

Mediation is similar to integration in the way that they both assist in the transfer of large quantities of information from an external system into the *j*Billing system. 
However, the *key* difference between the two is: mediation must be used when a company`s system, the external system, cannot make an API call. All it is able to do is to save the records in a file or a database. 

When *j*Billing receives data from an external system, there is a potential for that data to be in a different format from what the system recognizes. Mediation is also an important process because it will filter unnecessary events, translate them, rate the records based on pre-determined rules, and then update the record by applying it to the appropriate account.

Let's review an example to give you a better idea of how mediation works:

A phone company records an event every time a customer makes a phone call. This happens regardless of the fact that the call was dropped, lasts zero seconds, three minutes, or ten hours. Every time the user presses the call button, the action is recorded as an event.
 
These events are then stored in files or a database. When these events are given to *j*Billing, the Mediation Plug-In(s) rate the information through the use of rules, and then updates the customer accounts. In this case, the events (duration of a phone call) would become purchase orders, adding products and pricing to each appropriate customer. 

As you can imagine, if this process did not exist, the billing administrator for this company would need to manually enter each event. A file or database could potentially consist of hundreds and thousands of events. Not only would this be extremely time consuming, the odds of creating an error in a purchase order are much greater. Therefore, the mediation process eliminates errors and saves your company valuable time.

h2. Configure a Mediation Run

This chapter will use *Trend* as an example to show you how to set up and run Mediation in *j*Billing. 

Mediation needs to be configured before you can use it. As described above, the mediation process needs to translate information. It also needs to know what information to rate, in order to update the records in *j*Billing. 

Click on Configuration and then Mediation to open the Mediation Configurations screen.

*Trend* uses the Getting Started Mediation (Id: 180) Plug-In: 

!mediationconfiguration.png!

The Mediation Reader Plug-In must also be set up. 

To access this Plug-In, click on Plug-Ins, Mediation Reader, and then Separator file reader. *Trend* has already set this Plug-In up with two parameters. A format_file and a suffix. The values attached are actually files that you can access from within the *j*Billing installation files. 

!separatorfilereader.png!

*mediation-sample.csv*

To find this file, go to your *j*Billing install directory, click on the *j*Billing file, then Resources, and then Mediation. Within this folder, you will see the two files that are listed under the values in the Separator file reader Plug-In: mediation-format.xml and mediation-sample.csv.

Let's take a look at the mediation-sample file:

!mediationsamplecsv.png!

This is how a mediation file should be set up. For more information on how to set up a CVS file, please see Chapter 12: Blacklist. Your company may have hundreds and thousands of events, but this example only has 5.

!formatmediation.png!

As you can see by looking at this text, this document tells you what the format of the fields in the CVS spreadsheet are. 

Together, these two files give *j*Billing items to relate to in the rules engine. 

h2. Run Mediation 

In order to run mediation, you need to make sure that the process.run_provisioning = true. You can also change the process.frequency. Depending on your business needs, this number can be changed to any amount of time you desire.

At this point, you would restart *j*Billing, so that the mediation reports will run. Based on the *Trend* example, the result will look like this: 

!mediationprocessrun.png!

The run will let you know which configuration name you are viewing, the start, end and total runtime, how many records were processed, how many orders were affected, how many are complete and not billable, how many errors were detected and declared.

Let`s take a look now at what has changed in the system. The mediation run stated that 5 orders were affected. In the Order`s list, you will see that an order for Terry Wilson  
with Products B-03 and B-04 has been created. 

!terrywilsonpurchaseorder.png!

What Happened?:

Terry Wilson`s events were recorded on the mediation-sample file. *Trend* ran a mediation process which in turn, translated those events, rated and applied rules, and then  
updated the user account with the appropriate information. In this case, it was a purchase order with two products. 

!mediationterrywilson.png!

The most important aspect to remember about mediation is that its purpose is to sort the information in a way which the rules engine can understand. It leaves the heavy  
lifting to *j*Billing, meaning that the system is responsible for taking the sorted information, rating it and applying it to the correct account.







h1. CHAPTER 7: PAYMENTS 'Getting Your Invoice Paid'

h2. Paying Invoices

The last step in a billing cycle takes place when your customers pay their invoices. A payment reduces the balance of an invoice, and when that balance reaches zero, the invoice is considered paid.

The most common situation is to receive one payment per invoice, for the total amount of the invoice. In this case, you will have one payment per invoice, without any further complexity. This is the ideal case.

However, there are many other situations that can occur that will make the relationship between payment and invoices more complex. A customer might send a payment for the wrong amount, smaller or greater than their invoice. Or they might send one payment to pay two invoices. Eventually, you might have many payments associated to one invoice, or many invoices associated to one payment.

In *j*billing, the association of a payment to an invoices is called a 'link'. A payment will be linked to an invoice when it is paying that invoice. *j*billing will track these links. It will tell you how much a payment is paying for each invoice that it has a link with. Also, if an invoice with many payments is being paid, *j*Billing will tell you which are these payment and how much each of them are paying to an invoice.

The balance of an *invoice* is how much of it remains to be paid. The balance of a *payment* is how much of it is still not linked to an invoice. If a payment has a balance greater than zero, it means that it can still be linked to an invoice. It is possible to create and remove links to invoices very easily. 

Let's go through an example to better illustrate the relationship between payments an invoices.

* On June 1st a new customer sends a cheque to *Trend* for $50. They do so because they have to pay for a sign-up fee.
* On June 15th, this same customer receives an invoice for $100. They then send a cheque for $100.
* On July 15th, they get an invoice for a total of $100, but with a balance of $50. They then send *Trend* a cheque for $50.

*Trend* now has the following payment/invoice situation:

Payment number 1: pays $50 of invoice number 1. This invoice is also partially paid by payment number 2. Between these two payments, the invoice is fully paid.

Payment number 2: also pays invoice number 2 for half of its value. The rest of that invoice is paid by payment number 3.

So we have three payments, and two invoices, but the middle payment is linked to both invoices.

h2. Types of Payments

We can classify payments in two ways: 

# *how* they are entered in the system
# *if* the payment has been processed by a payment processor 

Lets see these two categories in more detail:

*By Method: Manual or Automatic*

A payment can be entered *manually* by a staff user or a customer directly in the system, or it can be *automatically created* by the billing process.

Entering a payment manually is described in detail below, in its own section. It basically means that *you* select the invoice that is getting paid, and enter the payment details (like the cheque number and amount in the case of a cheque).

A payment is automatically created by the billing process when using a payment processor to, for example, submit credit card payments. To learn more about automatic payment processing, refer to Chapter 4: The Billing Process.

*By Processor: Entered or Processed:*

Payments can be either:

# entered, or 
# processed

Entered payments are those that you simply enter in the system. There is *no* real-time processing to get the payment approved by a third party payment processor.

For example: if you receive a cheque from one of your customers. Also, if you process a credit card payment outside the system, let's say, by directly calling the credit card issuer by phone, you will also enter the payment on the system, without any further processing.

A processed payment is submitted to a payment processor, which replies with whether or not the payment has been successful. If the payment is accepted, the funds will be deposited directly into your merchant account. This process is all done in real-time, with the whole transaction taking only a few seconds. A typical example of this kind of payment is a credit card payment.

When you are processing a payment, you will see the check-box field, 'Process Payment in Real-Time'. If you submit the payment with the check-box set, the payment will be processed through your payment processor; otherwise it will be simply entered.

*Combinations*

Let's review some combinations of these two types of payments. Note that some are not applicable, such as, an automatic payment that is entered (automatic payments are always processed in real-time).

 {table}
*Combination Type*|*Entered*|*Processed*
Manual | A staff user, like the billing administrator, enters a cheque, or a credit card payment that has been approved on the phone. | A staff user or a customer submits a payment that is cleared in real-time by your payment processor. This is usually done for credit card payments.
Automatic | Not applicable. | The billing process submits payment for each invoice immediately after if it has been generated. The payment processor returns the result of each payment in real-time. 
 {table}

h3. Payment Methods

*j*billing supports several payment methods. By default, *j*billing is configured for credit cards and cheques. However, it also supports ACH (automatic clearing house). You can configure the system to specify which payment methods you want to accept. Please refer to Chapter 10: Configuration for more information. 

Some payment methods can be processed in real-time and allow you to work with automatic payment processing (to learn more about these terms, see the 'Types of payments' section above). For this, you will need an account with a payment processor.

A payment processor (also known as 'payment gateway') is an independent company, in no way related to *j*billing that provides you with a real-time processing of payments. This means that the payment processor will take your payment submission and forward it to the appropriate financial institution for instant approval. The result of the transaction will be captured by *j*billing, which will make the corresponding action on the customer's account.

If you want to add credit card support, or add another credit card brand to your list of accepted credit cards, you will first have to contact your payment processor or open a merchant account. These and similar actions are outside your *j*billing account, they are all related to your payment processor.

The following is a list of currently supported payment methods:

* Credit cards.
* Automatic clearing house (ACH): allows direct transfers from bank accounts. It is also called 'direct debit', because your customer's bank account is directly debited the payment's amount.
* Cheque (paper).

h3. New Payments'

There are two ways to submit a new payment in the system. 

# Click the Customer link, select the customer and then on the 'Make Payment' button located at the bottom of your screen.


!makepaymentbutton.png!


# Click the Invoices link, select the invoice you wish to pay and then click on the 'Pay Invoice' invoice button.

!payinvoice.png!

Both options will redirect you to the New Payment screen.

*Linking to an Invoice*

The next step is to select the invoice from the invoices list that this payment will be applied to. Only invoices that have some balance are displayed in this list. A payment should always be linked to an invoice. In theory, every time you enter a payment is because a customer has first received an invoice requesting the payment.

Although it is technically possible to go ahead and enter a payment that is not linked to any invoices, this should only be done for very exceptional circumstances, usually related to migrating from a legacy billing system to *j*billing. 

{note}
Please Note: this option is not available to customers who login in to *j*billing to submit an on-line payment. Customers always have to select an invoice before being able to submit a payment.
{note}

Once you have selected an invoice, its balance will be copied to the amount field of the payment. You can modify this by editing the field.

Partial payments are supported by the system. The amount paid will be deducted from the invoice's balance. If the balance reaches zero, the invoice is marked as 'Paid' (Status equal to 'Paid')

*Submitting the Payments*

The payment information varies depending on the payment method. Credit card payment will require the card number, name, etc. while cheque payment will have different required fields.

For those payment methods that support real-time processing (see the section on Types above), you can select whether you want the payment to simply be entered, or if you want it to be submitted to the payment processor for immediate processing.

Once you have entered all the payment information, click on the 'Make Payment' button to review all the payment information. The review screen will simply display all the payment's details for you to review before the payment is finally submitted.

h2. The Payment Details Screen

When you click on Payments and Refunds, a list of payments and refunds will be displayed. You can then view the details of a particular payment by clicking on it.

!paymentsrefunds.png!

Here you can see which invoice(s) this payment is paying, when the link was created and how much of the invoice is being paid. If you click on the Invoice link, you can view that particular invoice. 

It is from this list that you can also remove a link to an invoice, by clicking on 'Unlink'. The effects of this operation are described in the following section. The fields displayed will depend on the payment method. 

For payment methods that can be processed with a payment processor, the result of a payment can be:

* Successful: The payment was submitted to a payment processor and approved.

* Failed: The payment was submitted to a payment processor and declined.

* Entered: The payment was not sent to a payment processor, it was simply entered in the system. See the section 'Types' above for more information. If no result is shown, the payment was entered, but not submitted to a payment processor.

h2. Deleting, Modifying and Linking a Payment 

Before you can delete or edit a payment, you need to remove all the links between the payment and any invoices. *A payment cannot be modified as long as it is linked to invoices*. To remove the link between a payment and an invoice, click on 'Unlink'. This will undo the effect of the payment by increasing the invoice balance and also increasing the payment balance.

!unlinkpayment.png!

Once a payment is on its own, without paying any invoices, you will see the 'Delete' button, on the bottom of your screen. By clicking on it, you will be removing the payment from the system.

Another option that is available when the payment is not linked to invoices is 'Edit'. This option also requires that the payment has been entered manually (see 'Types of payments' above). *A payment that was processed by a payment processor cannot be modified*. Payments made with cheques and manual credit cards can be edited to correct errors.

The last action that you can do with an existing payment is to link it to invoices. For this, the payment has to have a balance greater than zero. Linking a payment to an invoice amount allows the user to pay (at least partially) the invoice. This is usually done when the payment is created (either manually or by the billing process), so manually linking a payment to an invoice should be an exception.

To create the link, follow the steps to submit a new payment (see above). Select the radio button beside the invoice you wish to link to the payment.

{note}
Please Note: all of the payment's balance will be used to towards the invoice, up to the total balance of the invoice. If a payment has a $50 balance, and the invoice is $50, then the payment will cover the $50 and be 'Finished' with balance of zero. If the invoice's balance is smaller than $50, then the invoice will be fully paid, and there will be some balance left over from the payment.
{note}

h3. Refunds

Refunds represent the return of certain amount of funds to a customer. Refunds can be summarized as payments that have the opposite effect. Instead of reducing an invoice's balance, they increase it. You will issue a refund only when you have received a payment from a customer first. When you create a refund, you will link it to the payment that is being refunded, just like a payment is linked to the invoice that is being paid.

Except for the differences described above, managing refunds is just like managing payments. You select the payment to be refunded. You select the method: cheque, credit card, etc. Then you select the invoice or enter an amount to be refunded. Refunds can be total, returning the total amount of the payment, or partial. 

Refunds also follow the same rules as payments for the processing. They can be simply 'entered', or they can be 'processed' in real-time through your payment processor.

For example: an 'entered refund' would be a cheque that you send to a customer because the customer over paid you or was overcharged for some services. For a 'processed refund', you would be refunding a payment that was processed on-line through a payment processor. In the case of a credit card refund, your customer's credit card will be refunded in real-time, just like a payment is cleared in real-time. 

{note}
Please Note: that not all payments processors allow you to submit on-line refunds.
{note}

For refunds involving a payment processor, *j*Billing only submits the refund request and shows you the result that is returned by the payment processor. For the details and ramifications of how this affects your customer's payment instrument (credit card, bank account), or how this affects your merchant account, you would have to contact your payment processor.e between the subsequent reminders, should you wish to have more than one. 

!firstreminder.png!

{note}
Please note: be aware that if you put a small number in the 'Next reminder' box, your customer might receive too many reminders before the due date of their invoice. They could end up tuning out the messages.
{note}

For example: 

*Trend* chooses to give to its clients 30 days before their invoice becomes overdue. *Trend* wishes to remind them up to 3 times before the due date that an invoice has been generated and should be paid as soon as possible.

This is what Trend enters:

!remindersexample.png!

This is what will happen:

Let's say that the invoice is generated on the first day of the month. If the client has not paid by the 15th, the previously composed text will be emailed. Should the client still not pay, a message will be sent again 5 days later, on  
the 20th, and again on the 25th of the month. If by the due date the client has failed to pay, their account will then switch over to the ageing process.





h1. CHAPTER 8: PLANS

h2. Overview

Let's begin this chapter with a scenario that will help to explain the concept of *Plans*:

A phone company sells a product: international calls, at $1 a minute. However, if a customer wants to pay $10 a month, they will receive a special reduced price for international calls: $0.50 a minute.  

How would this phone company set up their purchase orders to reflect the change in price?

*j*Billing has special functionality, which allows you to change the price of particular products, and group them together under a *Plan*. Common situations where you might have encountered a plan before are: when you bought your cell phone, internet service, or cable television. 

Without this feature, a Billing Administrator would have to create the same product with different prices. They would then have to manually add *each individual item included in that plan*. Not only would this take a considerable amount of time and effort, there would also be a chance that through human error, a product could be left out of the plan. 

{note}
Please Note: it is important to remember that when these products are included in a purchase order outside of the plan, they maintain their regular price. It is *only* when they are included in a specific plan that their price will adjust to the pre-determined amount.
{note}

h2. Creating a Plan

{note} 
Please Note: the following example is for demonstration purposes. In reality, an API call or mediation process would probably take care of automatically creating plans for you. 
{note}

When creating a plan, the important aspect to remember is that you are creating *one* product, which will have a different price when it is attached to a plan.

Let's now take a look at the phone company scenario again. Remember, they sell international calls at $1 a minute. If a customer decides to go on their international plan, for $10 a month, they will receive international calls at $0.50 per minute. 

To create a plan, you first need a product to put into it. To learn more about creating a Product, please see Chapter 1: Products.

!planproduct.png!

As you can see, the International Calls product costs $1 because, as previously stated, international calls outside of the $10 monthly plan are $1 per minute. 

Now that you have your purchase order, you need to add it to a plan.  Click on Plans to access the Plans screen and click on the 'Add New' button.

!addnewbutton.png!

This screen is very similar to the screen where you would create a purchase order; however you need to enter a Product Code and Description in addition to the Period, currency and rate. For further clarification on any of these fields, please refer to Chapter 1: Products. 

In this example, the Plan costs $10 per month. Therefore you would change the Period to Monthly, and enter 10 in the Rate field. 

!plandetails.png!

Click on the Products tab, find International Calls and click on it. The product will appear in the pane on the right hand side of your screen. As this product costs $0.50 when it belongs to the International Calls plan, change the rate to 0.50.

!planproductchangerate.png! 

When you are finished, click on the update button, and then on the 'Save Changes' button. You will be returned to the Plans screen, and your newly created plan will appear in the list. 

The following is a brief description of the fields you will find on this screen:


*Precedence*
This field describes the weight of a price on a product. The product with the higher precedence is always applied *first* to all plans that users subscribe to.

For example: a National Calling company has two plans. The first includes 100 minutes for $0.20. The second plan includes 100 minutes for $0.10, as well as text messaging. The National Calling company sets the precedence higher for the second plan; therefore, this product will always be applied first to any subscription. 

!precedence.png!

*Bundled Quantity*

This field is useful if you want to add a particular amount of a certain product to a plan order.
 
For example: A three year cell phone plan comes with a free cell phone. The cell phone would be entered as a unit of 1, as the customer would get 1 free cell phone.

!bundledquantity.png!

*Bundle Period*

The bundled period is connected to the bundled quantity field in that it dictates how many times the product is going to be billed for within a month, one time, etc.  

For example: if a company is giving away a free cell phone they might only want to give this item out once. Therefore, the bundle period would be set to: One time. 

{note}
Please Note: if the *bundle period* is different from the *plan period*, a new purchase order will be created for the bundled quantity item(s).
{note}

!bundleperiod.png!

*Add to Customer*

If the account you are creating the plan for belongs to a sub-account, or a children account, you can select the Billable Parent option. This field will associate the product and plan to the parent company, and ensure that the parent company receives the invoice. If the customer is the one making the purchase, then you would select, Plan Subscriber.

!addtocustomer.png!

*Pricing*

This field allows you to select a pricing model when you have added a product to a plan and are in the process of changing the rate amount.
For more information on pricing models, please refer to Chapter 1: Products. 

!pricing.png!

*Rate*

This field allows you to enter a new rate, or price for the product now that you have added it to the plan. 

*Currency*

From the dropdown menu, select the appropriate currency you wish to apply to the product. 

!currencyplan.png!

h2. Plans in a Purchase Order

Now that you have a product and the product in a plan, let's take a look at how it would appear in a purchase order: 

You will have to create two purchase orders. One purchase order will include the plan you just created, with a Period of: monthly. 

!monthlyorderplan.png!

It is a monthly purchase order because you know that the customer has signed up for this plan. The specifics include that they pay a monthly fee of $10.
The other purchase order will include the product, with the Period field set to: one time. Notice when you add the product, the price adjusts to show the plan amount of: $0.50.

!productplanpurchaseorder.png!

This purchase order has a period of one time because the phone company cannot know for certain how many minutes a customer will use per month. For the month of June a customer could use 4000 minutes. The next month, they might only use 20. A onetime purchase order allows the system to gather all the one time purchase orders that pertain to the plan, and apply them to the appropriate monthly billing period. 

*The Product Outside of the Plan*

What would happen if you created a purchase order with just the international calls product? Let's find out:

!productonown.png!

As you can see, because this new purchase order does not have the plan attached to it, the product will cost its regular price of $1.











h1. CHAPTER 9: NOTIFICATIONS 'Letting Your Customer's Know About Billing Events'

h2. Introduction to *j*Billing's Notifications

An important aspect to any billing process is notifying customers about billing events. Imagine a manual billing process. A large portion of the total effort will be to remind  
customers about their invoices, tell them that a payment is  
still due, etc. This applies even for large volume billing processes that are highly automated. You need to retry failed payments, cancel accounts that have not been paid for  
a while, etc. In short, communication with your customers is key,  
and needs to be automated as much as possible.

*j*Billing will notify your customers about various events, the most important one most likely being, a new invoice. These notifications have default text that might not suit  
your company, so it is very important that you review and edit  
the text for the notifications that you will be using.

The emails sent by *j*Billing can be as simple or as elaborate as you want. You can send a simple text email, or you can send a HTML rich email with colors and graphics. You  
can also add as much information as you want in a notification;  
by using the Velocity template engine, *j*Billing allows you to do complex notifications that include variable amounts of data. 

For example: you can send complete invoices with all the data that a customer expects from a paper invoice as an email.

h2. Writing Your Own Text

Let's start by getting a list of all the notifications that you can configure by clicking on Configuration, and Notification. 

!configurationnotification.png!

All notifications you will see here are email notifications except for, 'Invoice (paper)'. Once you click on a notification, the notification details will appear in a pane to  
the right of your screen. 

!notificationexampledefault.png!

{note}
Please Note: the image you see above has a few details filled in as an example. However, it will be up to you and your company to provide the subject and text for all of your  
notifications.
{note}

To change the text, click on the 'Edit' button. This will open the Edit Notifications screen.

!edit.png!

!editnotification.png!

Below you will find a list of the Edit Notification fields, and a brief description of their function.

*Active?*

If this check-box is selected, then the notification will be active and available for you to use.

!activenotification.png!

*Subject*

In this field, you would provide the subject line of the email. In other words, a brief description of what the contents of the email refer to. 

!subjectnotification.png!

*Body (Text)*

Here is where you will enter the message, or text that your customers will receive.

!bodynotification.png!

Here is where you enter the text for your own notifications. Note that the text is not static, it has variables. Please refer to the section below on *Tokens* for more  
information.

*Body (HTML)*

Here is where you will enter the HTML if required.

!htmlnotification.png!

{note}
Please Note: *j*Billing will always send HTML emails with the plain text content as an alternative. This means that you need to add your text to both the Text box and HTML  
box. This allows those recipients of your emails that cannot or  
don't want to receive HTML emails to still receive, open and read your notification in its plain text format.
{note}

*Dynamic Values with Variables*
Some notifications use variables to generate dynamic text. To use a variable, put the name of the variable with the '$' character in front. For example, to display the user  
name of a customer, you would write: $username, where username is the name of the variable. 
The following is a list of all available variables:

 {table}
*Object*|*Description*|*Velocity Variable Name*
ContactDTO | The user's main contact object | $contact
ContactDTO#firstName | The user's first name | $contact.firstName or $first_name
ContactDTO#lastName | The user's last name | $contact.lastName or $last_name
ContactDTO#address1 | The user's address line 1 | $contact.address1 or $address1
ContactDTO#address2 | The user's address line 2 | $contact.address2 or $address2
ContactDTO#city | The user's contact city | $contact.city or $city
ContactDTO#organizationName | The user's contact company name | $contact.organizationName or $organization_name
ContactDTO#postalCode | The user's contact postal code | $contact.postalCode or $psotal_code
ContactDTO#stateProvince | The user's contact state/province | $contact.stateProvince or $state_province.
UserDTO | The main user object | $user
UserDTO#userName | user name | $user.userName or $username
UserDTO#password | user password | $user.password or $password
UserDTO#userName | user id | $userid or $user_id
CreditCardDTO | The user's primary payment credit card (if it exists) | $credit_card
CreditCardDTO#ccNumberPlain | Last 4 credit card digits | $credit_cart.ccNumberPlain
CreditCardDTO##ccExpiry | Credit card expiry date | $credit_card.ccExpiry
ContactDTO | Company contact information | $company_contact
ContactDTO#organizationName | Company Name | $compant_contact.organizationName or $company_name
ContactDTO#field | Company contact fields | $company_contact.fieldName (as above with user contact info)
Integer | Company ID within *j*Billing | $company_id
 {table}

You can also access any other field within ContactDTO using the same $contact.fieldName syntax.
Invoice messages, payment messages, and ageing messages have additional fields. 

 {table}
*Order Notifications*
$period_start
$period_end
$total
 {table}

 {table}
*Ageing Notification*
$total
$invoice - InvoiceDTO object
 {table}

 {table}
*Invoice Email Message*
$total
$number
$due_date
$notes
$invoice - invoiceDTO object
 {table}

 {table}
*Invoice Reminder Message*
$days - days overdue
$dueDate
$number
$total
$date - date of reminder notification
 {table}

 {table}
*Payment Message*
$mthod - payment method, visa, mastercard etc. 
$total
$payment - PaymentDTO object
$invoice_number
$invoice - InvoiceDTO object
PaymentDTO.id
PaymentDTO.currency - CurrencyDTO object
PaymentDTO.currency.code
PaymentDTO.currency.symbol
PaymentDTO.paymentMethod.id
PaymentDTO.paymentMethod.description
PaymentDTO.paymentResult.description
PaymentDTO.creditCard - credit card information if paid using credit card
PaymentDTO.ach - ACH information if paid using ACH
PaymentDTO.paymentInfoCheque - cheque information if paid using a cheque
PaymentDTO.attempt
PaymentDTO.amount - amount paid
PaymentDTO.balance - remaining balance of the payment after it has been applied to the account
PaymentDTO.paymentDate
PaymentDTO.isRefund - 1 if is refund, 0 if normal payment
PaymentDTO.paymentNotes
InvoiceDTO.publicNumber - invoice number
InvoiceDTO.currency - CurrencyDTO object
InvoiceDTO.currency.code
InvoiceDTO.currency.symbol
InvoiceDTO.invoiceStatus.id
InvoiceDTO.invoiceStatus.description
InvoiceDTO.createDatetime
InvoiceDTO.dueDate
InvoiceDTO.lastReminder - date of the last notification sent to the user
InvoiceDTO.total - total amount due for the invoice (original balance + carriedBalance)
InvoiceDTO.balance - remaining balance of the invoice after payments have been applied
InvoiceDTO.carriedBalance - balance carried forward from a previous un-paid invoice
InvoiceDTO.paymentAttempts - number of payment attempts for this invoice (successful and failed)
InvoiceDTO.isReview - 1 if this invoice is a review invoice, 0 if not
InvoiceDTO.invoiceLines - collection of InvoiceLineDTO
InvoiceLineDTO.amount - total dollar amount of this line
InvoiceLineDTO.quantity - total quantity
InvoiceLineDTO.price - price per unit
InvoiceLineDTO.item.id 
InvoiceLineDTO.description - line description
 {table}


The following is a brief description of the variables that are in common to the specific notifications that are sent as emails to your customers:

*Invoice Reminder*

* $days - days before the invoice is due
* $dueDate - date that the invoice is due
* $number - the invoice number
* $total - the total invoice amount that is due
* $date - date that the reminder is sent

*New Invoice Email*

* $total - the total invoice amount that is due
* $id - ID of the invoice
* $number - invoice number
* $due_date - date that the invoice is due
* $notes - any notes that correspond to the invoice
* $invoice - the invoice DTO object

*Ageing Message*

* $total - outstanding invoice balance
* $invoice - the invoice DTO object that is still outstanding on the account

*Order Expiry Notification*

* $period_start 
* $period_end
* $total

*Partner Payout Message*

* $total
* $company - company description (e.g. "Prancing Pony Inc.")
* $period_start
* $period_end
* $partner_id

*Credit Card Expiry Message*

* $expiry_date

In addition to these simple variables, there are other complete objects with a lot of information. You can access this information using Velocity's features (see section  
later in this chapter.)

*Using Velocity Template Engine*

Velocity is an open source template engine that is part of the apache software foundation (http://velocity.apache.org/). With it, it is possible to enable *j*Billing's  
notifications to have variables and even embedded logic. For example,  
for an invoice total we need a variable; but to display the invoice lines, we need a way to loop over each invoice line to display it. We can't know how many invoice lines  
every invoice will have when we are writing the invoice email  
notification.

This section will explain why and how jBilling implements the notification templates with Velocity, but it is not a replacement for Velocity's documentation. Velocity is a  
feature-rich product, we encourage you to read its documentation  
or some of the books written about it.

*Variables and Objects*

As mentioned before, with just a '$' we indicate the presence of a variable. There are many simple variables, but then there are also complete objects exposed as template  
variables. For example this:
$first_name

... will produce the same results as this:

$contact.firstName

This is because the first is just a simple variable that jBilling adds for convenience, while the second form uses the 'contact' object which has all the customer's contact  
information. With Velocity, you can 'navigate' through the object structure, that is why we can access the field 'firstName' from the 'contact' object.

The contact object is of type ContactDTO. You can access any of its fields. To find out which fields this object (or any other object) has, please download jBilling's source  
code.
The integration guide is also a source of documentation of jBilling's object model.

*Logic*

Velocity implements its own scripting language that includes typical constructs such as
'if', 'for', etc... This is very useful when trying to display the lines of an invoice:

#foreach ($line in $invoice.invoiceLines)

Qty: $line.quantity $

line.description $

line.amount

#end

The above loop will produce something like this:

Qty: 1 - Subscription to monthly banner - 100

Qty: 4 - Additional fees - 44

....

There are many other applications for embedded logic within notification templates, but keep in mind that templates should remain simple and easy to change by nontechnical  
users.

*Tools*
As good as Velocity is, you will find the need for some additional functionality when it comes to show exactly what you want to the customer. For example, in the invoice line  
from above, may be it would have been better to show this:

Qty: 1 - Subscription to monthly banner - $100.00

{note}
Please Note: the formatting of the money value. It includes the currency symbol ($) and the cents.
{note}

There are a number of tools available for Velocity under the subproject 'Velocity Tools / Generic Tools' (http://velocity.apache.org/tools/releases/1.4/generic/). For the  
previous example, you would use the 'NumberTool' which you can access through the variable 'tools-number'. jBilling makes all these tools available for you as variables:

 {table}
*Variable Name*|*Tool*
tools-date | DateTool
tools-math | MathTool
tools-number | NumberTool
tools-render | RenderTool
tools-escape | EscapeTool
tools-resource | ResourceTool
tools-alternator | AlternatorTool
tools-valueParser | ValueParser
tools-list | ListTool
tools-sort | SortTool
tools-iterator | IteratorTool
 {table}

Here is an example of the 'DateTool' used to format a date:

$toolsdate.

format("MM/dd/yyyy",$payment.paymentDate)

The date coming from the payment object will be rendered as '02/10/2009' rather than the default Java date format: 'Fri Apr 10 15:27:32 PDT 2009'.

For a complete list of the methods available in each tool, you can look at: http://velocity.apache.org/tools/releases/2.0/generic.html

*Invoice (paper)*

Even if all of your customer's will be notified about their invoices by email, you still need to provide text for this notification. The reason for this is because text can  
also appear in the PDF format of the invoice. 

*Invoice Reminder:*

This notification's purpose is to remind your customers that an invoice had been sent to them. When this option is selected (see the Invoice Reminder section below for more  
details), one or several e-mails will automatically be sent to  
your customers at intervals that you will have previously chosen.

The messages will be sent after an invoice has been generated and until that invoice is paid or reaches its due date (whichever comes first).

*Payments:*

These two notifications (failed and successful) will let your customers know about the result of a payment attempt. The system automatically submits one of these when a  
payment has been processed in real-time using a payment processor.

Payment methods that fall in this category are: credit cards, direct debit, and ACH.

When you enter a payment, without *j*Billing doing any processing through a payment processor, you can choose to send a notification by clicking on the submission link after  
entering the payment. This applies to cheques and any other  
payment that doesn't involve real-time processing.

*Ageing Notifications:*

You can find these notifications under Configuration, Notification. Click on Users. You will need to enter the text for those related to the ageing steps that you've selected  
in the 'Ageing' options. Refer to the Ageing section of  
Chapter 10: Configuration, for more information.

*Trend* chooses to notify any late payer by e-mail up to 3 times over a set period. Here is the first message a late paying client will receive:

Clicking on 'User Overdue' *Trend* checks the Active check-box and enters: Overdue Balance in the Subject text box. Then enter the following text into the Body (Text):

@Dear Client,@

@Our records show that you have an overdue balance on your account. Please submit payment as soon as possible.@

@Regards,@

@Trend's Billing Department@

The notification 'User Overdue 2' the second message sent to a late payer will be more firm and in 'User Overdue 3', it will warn the faulty customer that their case will be  
transferred over to Collections if they do not pay within the  
next 24 hours.

h2. Email Delivery Parameters

*j*Billing will send emails to your customers on your behalf for many reasons. Sending them their invoices is one, but there are many more reasons, such as reminders, failure  
to receive a payment, balance overdue, etc.

Emails need a mail server to be delivered. When the notifications engine of *j*Billing needs to send an email, it will connect to a mail server using the email delivery  
parameters. You can use a mail server from your ISP provider, or set  
up your own mail server. It is also possible that you are running *j*Billing from a company that is hosting *j*Billing for you and they will include a default mail server.

The best option is if you run your own mail server. In any case, reviewing and configuring the email delivery parameters will save you and your customers some confusion.

*Why You Shouldn't Use the Default Parameters:*

Each email delivery parameter has a default value. If you do not specify any parameters, the system will still attempt to send emails using those defaults. Depending on the  
version of *j*Billing you are running, and where it is that  
*j*Billing is running, these defaults values can vary greatly.

When the system sends an email using just the default parameters, the client who receives it can get quite confused. A typical scenario of default values would be at the top  
of the email: "From: admin@jBilling.com". And should the  
customer wish to reply, the reply will be sent back to admin@jBilling.com. Therefore you will not receive that reply.

If you do not configure a mail server, all emails might just fail to be delivered, or the mail server of the hosting company using *j*Billing is going to be used. So, if an  
email sent to one of your customers bounces back, it will bounce  
back to the hosting server, *not to you*. If this happens, there is no way for you to find out that a customer has not received your notification. Also, your clients will be  
able to see in the email's properties that the email they just  
received was not sent by your company but by the hosting company.

h3. Self Delivery Paper Invoices

When you have a customer with 'Paper' as a delivery method the billing process will generate a PDF invoice and include the resulting document in a file, along with the  
invoices of all the other customers that also have 'Paper' for  
delivery method.

This is done to simplify printing and mailing paper invoices. Instead of having to go to each invoice and download the paper version of it for printing, you will have one  
single file containing all the invoices to be printed.

The system will email this file to the billing administrator if this preference is set, or to the *j*Billing system administrator if it is not set. In other words, when you  
set 'Self deliver paper invoices' you are indicating that you  
want to print and mail the invoices yourself. 

You can set this preference by clicking on Configuration, and email, located on the left hand side of your screen. 

!selfdeliver.png!

h3. Customer's Notes on Invoices

Your customers can have personalized notes with any text. This text can be copied to an invoice when it is being generated by the system. If you want the notes to go in the  
invoices, mark this preference. Leave it unset to prevent your  
customer from seeing the notes in future invoices.

!customernotesinvoice.png!

Once an invoice is generated and the notes are copied to it, the notes in the invoice will not change, even if you change the customer's notes. When you change the notes of a  
customer, only a *new* invoice generated will have the  
modified notes.

It is a common situation to add some notes to a customer, then download an existing invoice in PDF format and expect to see the notes. However, the notes that you've entered  
will be included in the *next* invoice that the system will  
generate for the affected customer.

Paper invoices will show the notes just below the list of items, while email invoices have a variable that allows you to include the notes anywhere you want.

h3. Purchase Orders About to Expire

You might want to let know your customers that a purchase order is reaching its 'Active Until' date. This way, your customer can renew a service that they are subscribed to  
before it expires. To do this, access the particular purchase  
order you wish to change. Then, check the attribute, 'Notify user when order expires'. You will also have to enter a date into the 'Active Until' field, if there isn't one  
already.

The system can send between one and three emails per purchase order. *When* these emails are going to be sent will depend on the preferences, 'Days for order notification'  
under Configuration, Email. These indicate how many days before  
the purchase order's 'Active Until' date each email is going to be sent. If, you'd like to send two reminders instead of three, then leave the preference 'Days for order  
notification - 3' blank.

!ordernotification.png!

There is one notification per step. You can set the text of the emails by clicking on Notification (within Configuration), Orders, and then on any of the 'Order about to  
expire' notifications.

h3. Invoice Reminders

This feature's purpose is to remind your customers that an invoice had been sent to them. It is called a reminder because the invoice has yet to be paid, but it is not past  
its due date.

When this option is selected, one or several e-mails will automatically be sent to your customers at intervals that you will have previously chosen. They will be sent after an  
invoice has been generated and until that invoice is paid or  
reaches its due date (whichever comes first).

Keep in mind that invoice reminders are different than the notifications from the ageing process. In a nutshell, *j*Billing sends invoice reminders *before the due date* of an  
invoice, while the ageing process takes over *after the due date*. Also, invoice reminders are just that, reminders; while the ageing process involves notifications and changing the status of the customer account.

Click on Configuration at the top of the screen, and then on Email, which is located on the right hand side of the screen. 

To activate the Invoice Reminders feature, check the 'Use Invoice Reminders' check-box.

!useinvoicereminder.png!

In the box below that, the 'First reminder' field, is where you indicate the number of days you wish to have between the generation of the invoice and the first reminder. The last line, the 'Next reminder', allows you to indicate the number of days you wish to have between the subsequent reminders, should you wish to have more than one. 

!firstreminder.png!

{note}
Please note: be aware that if you put a small number in the 'Next reminder' box, your customer might receive too many reminders before the due date of their invoice. They  
could end up tuning out the messages.
{note}

For example: *Trend* chooses to give to its clients 30 days before their invoice becomes overdue. *Trend* wishes to remind them up to 3 times before the due date that an invoice has been generated and should be paid as soon as possible.

This is what Trend enters:

!remindersexample.png!

This is what will happen:

Let's say that the invoice is generated on the first day of the month. If the client has not paid by the 15th, the previously composed text will be emailed. Should the client  
still not pay, a message will be sent again 5 days later, on  
the 20th, and again on the 25th of the month. If by the due date the client has failed to pay, their account will then switch over to the ageing process.







h1. CHAPTER 10: CONFIGURATION 'Setting Parameters to Suit Your Business Rules'

h2. Overview

One of *j*Billing's greatest features is that it allows you to manipulate, or configure different areas of the system, in order to accommodate your businesses requirements and needs.

If your company requires a particular currency, you have the ability to add it, or select it from a list. You can set up many different types of notifications, and have them automatically sent to your customers. You can also add custom fields to your customer contact screen, such as alternate phone numbers or addresses. 
The aspects described above are just a small sample of the different functionality you can manipulate in this section of the system. By the end of this chapter, you will have a better understanding of what kind of configuration is available within *j*Billing. 

h2. Branding

By default, *j*Billing web-based application has the *j*Billing logo in the top left corner, as well as *j*Billing's image: fonts, colours, etc. You might want to change these to your own colours and logo. This way, when your customers login to the system, they will find the familiar 'look and feel' from your company.

{note}
Please Note: the branding of *j*Billing can only be done within the parameters of the *j*billing Public License (JPL). You can change the parameters described in this document, while other references to *j*Billing and Sapienter Billing Software have to be left in place. For more information, JPL is available [herehttp://www.jbilling.com/JPL].
{note}

Branding the application to fit your needs is very simple. There are two parameters for you to modify. By default they are blank (empty), which means that *j*Billing's defaults will be used until they are changed. 

h3. Logo URL

This is the location of your logo for the top left corner of the screen. The file has to be in any of the Internet supported formats (jpg and gif for example). You have to enter the complete URL of the location of the file, for example:

http://www.yourcompany.com/image/logo.gif

If you have installed *j*Billing to run with encryption (where all the addresses start with 'https' instead of 'http'), you will need to provide the logo URL from a secured host as well. If you provide a location for your logo that is not encrypted, most web browsers will display a warning message when accessing every page.

h3. Cascade Style Sheet URL

Cascade style sheets provide a way to specify all the display attributes of a web page. This includes colours, fonts, text formatting, spaces between characters, etc. *j*Billing's web-based application relies on a .css file at: [http://your_host/billing/css/jbilling.css] (where 'your_host' is the location of the host where you've installed *j*Billing, such as 'localhost'). 

h3. Preferences

To access the Preferences, click on the Configuration link, located at the top of your screen. A list of all preferences will appear.

{note}
Please Note: if you are already in the Configuration section of *j*Billing, you only need to click on the corresponding link, located in the side bar on the left hand side of your screen. This applies to all areas within Configuration. 
{note}

To learn more about preferences, please refer to Appendix A: Preferences. 

h2. Ageing

h3. Introduction: The Ageing Process

What happens when a customer hasn't paid their invoice and the due date has come and gone? This is the issue that the ageing process addresses. The term 'Ageing' reflects the several steps that a customer account goes through, beginning with 'Active' and ending with 'Deleted'. This process *notifies your customers about their overdue invoices, and changes the status of that customer's account*. 

To access Ageing, click on the Configuration link, and then click on Ageing, located in the sidebar on the left hand side of your screen. 

!configurationageing.png!

Let's review the events that relate to the ageing process:

# An invoice is overdue, because the due date is past the current date.

# The grace period gives the customer a few more days before any action is taken.

# After the grace period is over, the ageing steps are applied, depending on which ones you have configured.
 
{note}
Please Note: if you do not want the ageing process to take place at all, you just need to make sure all the check-boxes beneath the column 'In Use' are unchecked, and click the 'Save Changes' button.
{note}

Let's go over each of these parameters in more detail:

*Grace Period*

A customer's invoice has to be overdue in order for them to be put into the Ageing Process. When this happens, the system will wait the amount of days that you specify under 'Grace Period' before moving the customer to the first step. The grace period allow for cheques to arrive by mail, for instance, should you have customers sending in their payment using slower means. 

!activegraceperiod.png!

*Steps*

The key attribute of an ageing step is its status. The status of a step is pre-configured: step 1 is 'Active', step 2 is 'Overdue', step 5 is 'Suspended', step eight is 'Deleted'. Each of these statuses has very important consequences to a customer account:

*Active:* This is the normal status of a customer, before they enter the ageing steps. 

*Overdue:* A customer has failed to submit a payment before the due date. The customer will receive emails containing text you will have selected, and at a frequency of your choice (see examples below). Other than these notifications, there are no other changes to the customer's account. All the purchase orders remain the same. 

!overdue.png!

*Suspended:* Once a customer's account is suspended, the system will update all of the customer's active purchase order to a status of 'Suspended'. *j*Billing will therefore *stop generating invoices* for this account.  The system will also send a notification to the customer. 

!suspended.png!

*Deleted:* A this stage a customer's account is *deleted from the system*. For obvious reasons, you must be careful when using this step. Normally, you will *only* use this ageing step when you are sure a customer will not pay her invoices and you just want to remove their account from the system. 

!deleted.png!

{note}
Please Note: there is also a column called 'Can login'. This is not related to logging into *j*Billing. Your customers can always login to the system (except when they have a 'Deleted' status). This way, they can get up-to-date with their payments, update their credit card information or submit a payment. The column 'Can login' is only relevant when integrating your system with *j*Billing through one of the integration APIs.
{note}

You can select which steps your customers will go through in the Ageing Process by using the 'In Use' check-box of each step. If the check-box is checked, the ageing process will use the step, otherwise it will be ignored. 

The column 'Days' of each step represents the amount of days your customers will stay in this step before moving on to the next one. For the last step, this value has to be zero. A customer reaching the last ageing step will stay in that state until they actually pay, and is set back to 'Active'.

The 'Welcome Message' is a message that will be displayed right after login. Here you can also specify the welcome message for an 'Active' status. This is an important message that will be displayed to all your active customers immediately after they log into *j*Billing. Please note that this text accepts HTML tags, you can use these tags to customize the look of your welcome screen.

{note}
Please Note: you might not want your customers to ever login to *j*Billing. If that is the case, the welcome message is irrelevant for you.
{note}

The 'Failed login message' is only relevant when using an integration method. When a customer wants to access your services, your system can query *j*Billing for this message to be displayed.

For each step that you select (by checking the 'In use' check-box), *you will have to specify the notification email message*. You can do this by clicking on menu option Notification and then on each of the notifications that apply to the statuses you selected for your Ageing process.

For example: if you've selected the steps 2 (Overdue), 5 (Suspended) and 8 (Deleted), you will have to enter the text for the notifications: User Overdue, User Suspended and User Deleted. Additionally, you will need to enter the text for the notification 'User Reactivated', which is sent when a customer in the Ageing process goes back to 'Active' status after a payment.

h3. Example

*Trend* has a 5 day grace period, which indicates it wants to have 5 days go by before a customer gets notified by e-mail that their payment is late. In other words, a customer will be bothered with emails only 5 days after an invoice is actually overdue.

This is done mostly because many of *Trend's* customers pay by cheque, and this kind of payment requires someone from the accounting department to actually login to *j*Billing and manually enter the payment. Since there is some human intervention required, *Trend* chooses to use a grace period of five days.

For the ageing steps, *Trend* switches on 3 steps: Overdue, Overdue 2 and Overdue 3.

!trendoverdue.png!

There are no steps from the 'Suspended' group. *Trend* prefers not to automate these steps because they involve more than just sending emails asking customers to pay their late invoices. Suspended steps go farther, suspending purchase orders that otherwise would be active.

!trendsuspended.png!

For *Trend* this is not a good option. They do not have such a large number of customers that would require automation of this part of the collection process. *Trend* prefers to take those customers that had reached the 'Overdue 3' step and give them a call directly before any further action is taken.

The purpose of this example is to show you that the best choice for the ageing process configuration depends on many factors based upon how you run your company: how large it is? Is the relationship with your customers personalized, or do you favour a fully automated system? *Trend* finds a balance by automating part of the process with *j*Billing, and leaving the rest to its human resources.

Let's take a closer look to the parameters of these three steps for *Trend*: We will assume an invoice with a due date of June 1st.

Overdue: (7 Days). The message related to this step is sent right after the grace period is over, on June 6th. A customer would be in 'Overdue' state for 7 days, starting on June 6th and ending on June 13th.

Overdue 2: (10 Days). The message related to this step is sent on June 13th, when the customer is moved from 'Overdue' state to 'Overdue 2' state. A customer would be in 'Overdue 2' state for 10 days, starting on June 13th and ending on June 23rd.

Overdue 3: (0 Days). Since this period is the last one selected; the value next to it needs to be zero. The message related to this step will be sent on June 23rd. From here, the only change of status that can occur automatically is when the customer pays and they return to an 'Active' status. The only other way that their status can change is manually: an employee of *Trend* would have to edit their account and changing them to 'Suspended', 'Deleted', etc.
 
h3. Billing Process

To access the Billing Process, click on the Configuration link, and then on Billing Process, which is located in the side bar on the left hand side of your screen. 

!configurationbillingprocess.png!

This functionality is described in more detail in Chapter 4: The Billing Process. 

h3. Blacklist

To access the Blacklist feature, click on the Configuration link, and then on Blacklist, which is located on the side bar on the left hand side of your screen. 

!configurationblacklist.png!

To learn more about this functionality, please refer to Chapter 12: Blacklist. 

h3. Company

This area of the *j*Billing system is for you to add your company information. Fields such as: your company name and address can appear on the invoices that you generate for your customers. Here, you will also set the default currency and language for your customers. These default settings will save you time when you are adding new customers or products. 

{note}
Please Note: although you are setting defaults, it is possible to add other currencies and languages. Please refer to these respective areas within this chapter for more information. 
{note}

To access this functionality, click on Configuration, and then on Company, which is located in the sidebar on the left hand side of your screen.

!configurationcompany.png!

h3. Currencies 

You can sell your products and services in several markets that have different currencies. *j*Billing will invoice your customers in the currency that they are expecting, and will make and currency exchange calculations in the process. 

To access this area of the system, click on Configuration, and then on Currencies, located on the left hand side of your screen. The Currencies window will appear.

!configurationcurrencies.png!

*Activate a Currency*

To activate a currency, click on the check-box beside the one you wish to turn 'on'. This currency will now be available in the dropdown menu field: Currency, located on the Customer information screen.

*Add a New Currency*

To add a new currency, click on the 'Add New' button. The new currency pane will open on the right hand side of your screen. 

!newcurrency.png!

Fill in the applicable fields, and if you want this currency to be active, check the check-box beside 'Active'. When you are finished, click the 'Save Changes' button to save the new currency, which will then appear listed in the Currencies pane.
 
h3. Email

To access the Email functionality, click on Configuration, followed by Email, which is located in the sidebar on the left hand side of your screen. 

!configurationemail.png!

To learn more about this aspect of *j*Billing, please refer to Chapter 9: Notifications. 

h3. Invoice Display

To access this area of Configuration, click on the Invoice Display link, located in the sidebar on the left hand side of your screen.
For more information on setting the 'Next Invoice Number' and 'Invoice Number Prefix' fields, please refer to Chapter 5: Invoices. 

!configurationinvoicedisplay.png!

It is also possible to upload your own company logo by clicking on the 'Choose File' button. This logo will appear on all of your invoices. To save and apply your changes, click the 'Save Changes' button.
 
h3. Mediation

To access this area of Configuration, click on the Mediation link, located on the sidebar on the left hand side of the configuration screen.

!configurationmediation.png!

To learn more about this functionality, please refer to Chapter 6: Mediation for more details.

h3. Notification

To access this area of configuration, click on the Configuration link, and then on Notification, which is located in the sidebar on the left hand side of the screen. 

!configurationnotification.png!

For more information on this area of *j*Billing, please refer to Chapter 9: Notifications. 

h3. Order Periods

To access this area of the *j*Billing system, click on Configuration, and then Order Periods, which is located in the sidebar on the left hand side of your screen.

!configurationorderperiods.png!

To learn more about Order Periods, please refer to Chapter 3. 

h2. Plug-Ins

At the very core of *j*Billing, there are modules with most of the business logic code. These modules have been organized following a 'Plug-In' architecture. This means that a module can be easily replaced by another one, thus altering the behaviour of *j*Billing. They are called 'Plug-Ins' because they can be swapped without having to deal with the source code: you don't need a programmer to make changes. 

Plug-ins are Java classes, that is why the names follow the Java naming conventions. There are a number of plug-ins available by default with the standard *j*Billing. The details of each of these plug-ins, such as their parameters, are out of the scope of this guide. You will only need this information when you want to extend or modify, or create your own. 

It is possible to add, remove and change a plug-in by clicking on Configuration, and then Plug-Ins, which is located in the sidebar on the left hand side of your screen. A pane with all the available plug-ins will appear. 

!configurationplugin.png!

To view the plug-ins' details, simply click on the plug in you wish to view. Its details will appear at the top right hand side of your screen.

!addnewplugin.png!

Each plug-in has three fields:

*ID:* This is an internal unique number that helps to identify this plug-in. This is largely for internal use in *j*Billing, but might be useful to you at times. For example: the 'router' plug-in that allows you to assign a payment processor to a user, needs to know about other plug-ins. It does so by taking the IDs of those plug-ins as its parameters.

*Type:* This is the Java class name that will be used by *j*Billing when a plug-in of this category is needed. For example: when *j*Billing needs to send a notification, it will look into your configuration to determine which plug-in belongs to the notification category.

*Processing order:* Sometimes you will have more than one plug-in for the same category. Let's look at an example with payment processors. You have two accounts with two difference payment gateways. You can add them both as plug-ins, but you need to give one the processing order '1' and the other one a '2'. *They cannot have the same processing order, otherwise an error will happen*. The system will *always* start by using the plug-in with processing order '1'. If that gateway is unavailable, it will try the next one (this is normally called 'fail over strategy'). You can have any number of payment processors configured this way.

Additionally, a plug-in can have parameters. Not all do, but it is not unusual if they do have some. A parameter gives the plug-in some additional information on how to behave, and makes the plug-in more easily reusable.

For example: the 'PaperInvoiceNotificationTask' is responsible for generating a PDF invoice. It takes one parameter: 'design' with the name of the file that has you paper invoice design. You can create a new design and simply change this parameter to start using it. This way, it is easy to have many designs available and change the active one at any time.

h3. Changing the Plug-Ins Configuration

To add a new plug-in, click on the category of your desired plug-in and click on the 'Add New' button. This will take you to the Add new plug-in screen. You will have to select the class name of the plug-in you want to add from the drop-down list. If there are also parameters available, you will have to enter the mandatory information.

It is also possible to edit the plug-in. Click on the plug-in you wish to edit, and click on the 'Edit Plug-In' button.

!editplugin.png!

Deleting a plug-in or parameter is equally as easy. Click on the plug-in you wish to delete and click on the 'Delete Plug-In' button. 

!deleteplugin.png!

h3. Users

This area of *j*Billing allows you to dictate which of your users have access to *j*Billing, and what kind of access they have. To access this area of the system, click on Configuration, and then on Users, which is located in the sidebar on the left hand side of your screen.

!configurationusers.png!

*Add a User*

To add a user, click on the 'Add New' button. You will be redirected to a form that closely resembles the New Customer screen. Fill in the applicable fields. Some important fields to take note of are: 'Role' and 'Contact Type'. Please see the appropriate sections below for more information. 

!addauser.png!

*View Permissions*

Clicking this button allows you to view the 'Edit Permissions' screen. Basically it allows you to see the areas of the system that the user has access to. 

*Edit and Delete*

To edit an existing User, select the user you wish to make changes to, and then click the 'Edit' button.

To delete an existing User, select the user you wish to delete, and then click the 'Delete' button.

h3. Roles 

Here, you will be able to define the different roles that will then be available to assign to your users. To access this section of Configuration, click on the Roles link, which is located in the sidebar on the left hand side of your screen. 

!configurationroles.png!

Before you add a role, let's take a look at the Super user as an example. You can do this by clicking on the role, and then on the 'Edit' button. You will be redirected to the 'Edit Role' screen, where you will see headers, followed by a list of items with check-boxes. 

!editrole.png!

{note}
Please Note: the above image does not include all items available. This is only a sample.
{note}

Since this role is for a Super User, all the check-boxes will be checked. This means that the user you assign this role to will have the ability to manipulate all the areas selected. Therefore, when you are creating a new role, you need to carefully consider which aspects of the system you want it to have access to. 
To add a new role, click on the 'Add New' button. You will be redirected to the New Role screen where you will have to enter the following information:

*Number:* This is not an editable field. However you should be aware that it will read 'New' until you save the role. Your new role will then be assigned a number by the system.

*Role Name:* Enter the name of your role here. For example: Customer, Reviewer, Clerk, etc.

*Description:* Enter a brief description detailing the function of the role. For example: a description for the role name, Customer would have: 'A customer that will query his/her account' in the description field. 

Once you have entered information into the above mentioned fields, scroll through the rest of the form and select appropriate check-boxes. Remember, if you select a check-box, it means that the user will have access to that information, as well as the authority to manipulate it. 

Click the 'Save Changes' button to save the role you have created. This role will now be available for selection in the Role dropdown list on the New User screen.

h3. Contact Types

This feature allows you to organize the multiple types of contacts you might have for each customer.

For example: you might have the main contact information for a customer, as well as their accounting contact information. If you set up another contact type, you can send all email notifications (invoices, payments, reminders, etc), to both your customer and their accountant.

{note}
Please Note: one 'type' *must* be the primary contact, which will be used for the address on the printed invoice. The primary contact will always be included in the email notifications, whether the box has been checked or not.
{note} 

To access this area of the system, click on Configuration and then on Contact Types, which is located in the sidebar on the left hand side of your screen.

!configurationcontacttypes.png!

*Add a New Contact Type*

To add a new contact type, click on the 'Add New' button. Since there is already a primary contact in this example, the 'Primary Contact' field will automatically read: no. 

Enter the title you wish to call your new contact type in the appropriate language field. Click the 'Save Changes' button to save your changes.

!newcontacttype.png! 

This new contact type will now be available to select in the applicable dropdown menu when you create or edit a User.

h3. Custom Contact Fields (CCF)

It is possible to have the fields of the contact information customized to your needs. These fields will show up on the printed invoice. 

For example: you might need a tax number to appear on the printed invoices, for legal or accounting purposes. You might also wish to have home phone and work number for your customers. 

!customcontactfields.png!

For example: 

!facebookccf.png!

This custom contact, when saved, will appear as an editable field in the Customer information screen. 

!editcustomerfacebookccf.png!










h1. CHAPTER 11: SUB ACCOUNTS 'Grouping Customers'

h2. Introduction

In many occasions, each of your customers actually represents many individual customers, gathered under one organization. These individual customers are the end users of your services, but they should not be invoiced directly. The invoice should go to the organization and should include all the charges of each of the end customers.

A typical example is a company who provides cell phones to their employees. If you are the cell phone provider, your customer is the company, not the employees. The employees are the end users of your services. The company wants one invoice, but it has to clearly separate the usage of each of its employees. You do not want to send an individual invoice to each employee; they are not the ones paying.

*j*billing allows this kind of multiple-level customer organization through its sub-account support. The organization will then 'own' many sub-accounts. We can visualize this as the organization being the 'parent' account, and each of the end customers or sub-accounts being the 'children' accounts.

The main concept behind this is that a customer account can be a parent account that is linked to many children account. Both parent and children accounts can have their own purchase orders that represent the services that they are subscribed to, or have bought from you.

When the billing process generates invoices, it will create *just one invoice for the parent account*. The single invoice will include all charges from the purchase orders belonging to the children accounts. The resulting invoice will be divided in sections, one per sub-account, with a description of the account, the items and a sub-total.

h2. When to Use Sub-Accounts

As a general rule, you should organize your customers as parent-children when the child account is identified as the end user of your services, and the parent account is identified as the one who receives (and pays) the invoice. Let's look at it in a different way. If the customer using your services is different than the customer paying for them, there's a good change you will need to use sub-accounts.

This general rule applies to many practical situations that can initially look quite different from one another, yet they share the same account structure. Let's review some common examples:

*A large account, with multiple locations:*

Your customer is an organization that has multiple locations or branches. Each of these locations is subscribed to your services in a fairly independent way. Still, you are to send one invoice to the head office, where it is going to be received and paid. This invoice will clearly state all the charges for each of the locations.

*An organization with many users:*

For example: a mobile phone company selling to businesses. 

A typical client will be a company with many employees. Some of these employees will receive a cell phone paid by the company. This company will need to receive one single invoice per period with the details of the charges related to each of its employees. Therefore, the company will be represented as a parent account, and each employee as a child account.

*A reseller of your services:*

A reseller will buy your services and resell them to its customers. The reseller will take care of billing these customers using their own terms. You will have to invoice the reseller for all the services that have been resold. 

You can set up this situation with the reseller being a parent account, and each of the end users as a child account. The end user will not receive an invoice, the reseller will. The invoice will detail which end users are included and with which services.

h2. Creating a Parent-Children Account

We need to create the parent account first. To do this, click on Customers, and then on the 'Add New' button.

Enter the new customer's information just as a normal new account, except for the field 'Allow sub-account'. Make sure that this check-box is checked. This will indicate that the new customer will be a parent account.

!allowsubaccount.png!

Click on 'Submit' and take notice of the number that the system has assigned to this new user. We will need this number to create children account of this parent.

!newparent.png!

Notice also, that the column 'Parent/Child' has an image of a large person with the number zero beside it. This confirms that our new customer is a parent account, and that it currently has no children.

Let's skip the steps to enter this customer's contact and payment information. To learn more about this, consult Chapter 1: Users.

The next step is to create a new child account. Make sure that the parent is selected. Scroll down to the bottom of the screen and click on the 'Add Sub-Account' button. 

!makepaymentbutton.png!

Enter the child account login information. This time, you will need to enter the number of the parent account into the Parent ID field.

!exampleparentid.png!

Since children accounts cannot login to *j*billing, the login name, password and email are not going to be used. However, the system requires these fields so you will need to enter some information.

For children accounts, it is *very important to enter the First Name and Last Name of the contact information*. These are the fields that will be used as a header in the invoice when the items belonging to the individual children are listed.

h2. The Differences Between Sub-Accounts and Common Accounts

Parent and children accounts work pretty much the same as common accounts. Still, there are a few differences that are important for you to be aware of:

h3. Listing Parent and Children Accounts

When you click on Users and then Customers the list of customers does not include children accounts. *Only normal accounts or parent accounts are listed*. To view the children accounts associated to a parent account, start by selecting the parent account.

The usual customer screen shows up, with a few differences. First, the number of children account is added to the user's information. Also, a link to this customer's list of children accounts is available.

!childaddedparent.png!

!childwithuser.png!

h3. Purchase Orders

Parent and children accounts can have their own purchase orders. These will be included in the invoices generation for the parent account.

*For Children*

To create a purchase order for a children account, you follow the exact same steps for the creation of a purchase order for a normal account. The only difference is that you have to first select the parent account from the list of customers to create the new purchase order. Since this is a parent account, the list of children accounts will be displayed. Now you have to select the child account that will own the new purchase order.

*For Parents*

Follow the same steps as when creating a purchase order for a normal customer.

*Sub-Accounts Login*

Children accounts cannot login to *j*billing. These accounts do not receive invoices or submit payments, so there would be little value for them to login to *j*billing.

On the other hand, parent accounts will find all their billing information and history by login in to *j*billing, just like a normal account. Additionally, parent accounts can list the sub-account that they own and verify their information.

*Invoices*

Children accounts do not receive invoices. Instead, all their related purchase orders are included in the invoice sent to their parent.

Parents receive an invoice that compiles the charges for all its children. The header for each children section uses the first name and last name of the primary contact of the children account. The items in the invoices are order by the item number (just like in a normal invoice), but also grouped by sub-account. You can also see that this invoice had some items from a purchase order that belongs directly to the parent account. These items are listed first.





h1. CHAPTER 12: BLACKLIST 'Filter Payment Requests'

h2. Overview

The blacklist is a list of customer and/or payment information that is used to filter payment requests, which are expected to fail, before they reach a payment processor gateway. There are currently six filters implemented: user id, name, phone number, address, credit card and IP address. Different filter types can be enabled or disabled without affecting the data in the blacklist.

Administrators and clerks have the ability to add or remove individual customers to/from the blacklist through the GUI. The GUI also shows any matches the customer has in the blacklist.

When the aging process takes a customer status to 'Suspended' or higher, all their available details, such as used id, credit card, address, etc., are added to the blacklist. The idea is that this customer tries to re-subscribe later with any of the same details, they automatically blacklisted.

Batch upload of a comma-separated values (CSV) blacklist file through the GUI is also possible. It can either add to or replace existing uploaded blacklist entries.

h2. Activating the Blacklist

To active the blacklist, two plug-ins need to be added to your system configuration, as well as a preference enabled with the id of the payment filter plug-in configuration.

h3. Payment Filter Plug-in Setup

Click on Configiration, then Plug-ins to access the plug-in configuration page. By default, you will not be replacing an existing plug-in, but adding a new one.

The new plug-in is the following:

@com.sapienter.jbilling.server.payment.tasks.PaymentFilterTask@

It's important that plug-in is configured to be the first payment processor in the plug-in processing order. This is so a payment only reaches a real payment processor if it isn't first stopped by the blacklist payment filter. See Plug-ins under the Configuration chapter for more information.

h3. Plug-in Parameters

By default, all filter types are disabled. Each filter type you wish to use must be explicitly enabled as a plug-in parameter. The following table lists all possible parameters. Setting a value of false or removing a parameter causes it to be disabled.

 {table}
*Name*|*Value*
enable_filter_user_id | true
enable_filter_name | true
enable_filter_cc_number x | true
enable_filter_address | true
enable_filter_phone_number | true
enable_filter_ip_address ** | true
ip_address_ccf_id xx | 3
 {table}

Notes: 
x In *j*Billing 1.1.2, this was unfortunately left as 'enable_filter_test'. 
xx The IP address is a custom contact field (CCF). If this filter is enabled, the id of the IP address CCF must be provided as the value of the 'ip_addres_ccf_id' parameter. Please see Chapter 10: Configuration for more information. 

h2. Blacklist Preference Setup

Preference type 43 needs to be set to indicate the id of the payment filter plug-in. See 'Appendix A' for information on adding preferences. The plug-in id is the number next to the class name of the configured plug-in.

If the id of the PaymentFilterTask plug-in is 460 and the next preference id will be 100, the SQL would be something like this:

INSERT INTO PREFERENCE (ID, TYPE_ID, TABLE_ID, FOREIGN_ID, INT_VALUE,

STR_VALUE, FLOAT_VALUE)

VALUES (100, 43, 5, 1, 460, NULL, NULL)

h3. Blacklist Suspended Customer Plug-In Setup

If you would like customers that are moved into the 'suspended' status or higher from a lower status to have their details automatically blacklisted, the following plug-in needs to simply be added through the Plug-In screen (Configuration, then Plug-ins):

@com.sapienter.jbilling.server.payment.blacklist.tasks.BlacklistUserStatusTask@

h2. Blacklist Matches

When inspecting a customer (click Customers, select a customer and click on the magnified glass icon beside the User ID), an information box lists any blacklist matches for that particular customer. It only includes matches for the enabled filters.

h3. Add/Remove Link

The add/remove link on the bottom of the 'Blacklist Matches' box, shown above, allows administrators or clerks to add or remove a customer's user id from the blacklist. This can be done whether the user id blacklist filter is enabled or disabled.

h2. Batch Upload

The batch upload feature allows externally generated comma-separated values (CSV) blacklist files to be uploaded through the GUI. It can either add to or replace existing uploaded blacklist entries.

It will not modify blacklist entries that were created by the add/remove link or because customers have had their status become 'suspended' or higher. To get to the Batch Upload screen, click on Configuration, then Blacklist.

h2. CVS Format

Each line of the CSV file corresponds with one blacklist entry. It is assumed there is no column name header line present. The columns are as follows:

TYPE, FIRST_NAME, LAST_NAME, ADDRESS_1, ADDRESS_2, CITY, STATE_PROVINCE, POSTAL_CODE, COUNTRY_CODE, PHONE_COUNTRY_CODE, PHONE_AREA_CODE, PHONE_NUMBER, IP_ADDRESS, CC_NUMBER, USER_ID

The type field is an integer that indicates what blacklist entry type the line belongs to.

Valid values are:

 {table}
*Type Number*|*Type Name*|*Fields*
1 | USER_ID | USER_ID
2 | NAME | FIRST_NAME, LAST_NAME
3 | CC_NUMBER | CC_NUMBER
4 | ADDRESS | ADDRESS_1, ADDRESS_2, CITY, STATE_PROVINCE, POSTAL_CODE, COUNTRY_CODE
5 | IP_ADDRESS | IP_ADDRESS
6 | PHONE_NUMBER | PHONE_COUNTRY_CODE, PHONE_AREA_CODE, PHONE_NUMBER
 {table}

At least one field is required for each line type. 

h3. Example

The following is an example of a valid CSV file:

@1,,,,,,,,,,,,,,1006@

@2,Joe,Bloggs,,,,,,,,,,,,@

@4,,,321 Main Rd.,,Vancouver,BC,V6B2E2,CA,,,,,,@

@6,,,,,,,,,61,02,55554321,,,@

@3,,,,,,,,,,,,,5105105105105100,@

@5,,,,,,,,,,,,123.123.123.123,,@

h2. Failed Payments

When a payment is failed by the blacklist filter (credit card for example), the payment authorization record will state that credit card (or other ID) is blacklisted. 







h1. CHAPTER 13: REPORTS 'Analyze Your Billing Results'

h2. Overview

*j*billing's Reports Engine is a powerful and flexible tool that will allow you to query all your billing information. To start, click on the Reports link, located at the top of the screen.

!reports.png!

Here you can see a list of the available report types: Invoice Reports, Order Reports, Payment Reports and User Reports. 

!reporttypes.png! 

To access a report, click on the report type that you require. A list will appear on the right hand side of your screen. Select the report you require. Some of the available reports have parameters associated with them, such as a start date, end date, or period breakdown. These are the parameters you use to specify what information is generated on the report. 

Let's take a brief look at each of the standard reports:

h3. Invoice Reports

* GL Summary: General ledger summary of all invoiced charges for the given day, grouped by item type.

* GL Detail: General ledger details of all invoiced charged for the given day.

* Accounts Receivable: Simple accounts receivable report showing current account balances.

* Ageing Balance Detail: Detailed balance ageing report. Shows the age of outstanding customer balances.

* Total Amount Invoiced: Total amount invoiced grouped by period. 

h3. Order Reports

* Product Subscribers: Number of users subscribed to a specific product.

h3. Payment Reports

* Total Payments: Total payment amount received grouped by period.

h3. User Reports

* Top Customers: Total revenue (sum of received payments) per customer.

* User Signups: Number of customers created within a period.

h3. Interpreting the Results

At any time, you can click on the 'Run Report' button to execute the chosen report. You also have the option to view the report as a: HTML, PDF or Excel file. 

!runreport.png!

!reportformat.png!

h3. Examples:

*Total Amount Invoiced in the First Week of August:*

It is very important to know how much has been invoiced in a given period of time. The total invoiced is in many cases the revenue of your company. This example will demonstrate this for the first week of August. The result will include the invoices generated by the billing process, as well as those generated manually.

# Click on Reports and then on the Invoice Reports type. The reports listed beneath that type will appear on the right hand side of your screen.

# Select the report name: Total Amount Invoiced. The report and its parameters will appear on the right hand side of your screen.

# In the Start Date field change the date to: 02-08-2011.

# In the End Date field change the date to: 09-08-2011.

# Select the Period Breakdown: Day (can also be by week or month).

# Select the format you wish to view the report in and click on the 'Run Report' button to generate the report.

!reporttotalinvoiceexample.png!

*Total Amount Invoiced per Customer in the First Week of August:*

This report will tell you who has been invoiced in a given period of time, and for how much. If a customer has more than one invoice, they will be consolidated in a single total. Customers that have not been invoiced in the selected period will not be included in the results.

# Click on Reports and then on the User Reports type. The reports listed beneath that type will appear on the right hand side of your screen.

# Select the report name: Top Customers. The report and its parameters will appear on the right hand side of your screen.

# Change the Start Date to: 02-08-2010.

# Change the End Date to: 09-08-2010.

# Select the format you wish to view the report in and click the 'Run Report' button to generate the report.

!topcustomersreport.png!

*Total Payments in the First Week of August:*

This report will add up all the successful payments received in the first week of August. Payments that have failed for any reason are excluded. All the payment methods are included. 

# Click on Reports, and then on the Payment Reports type. The reports listed beneath that type will appear on the right hand side of your screen.

# Select the report name: Total Payments. The report and its parameters will appear on the right hand side of your screen.

# Change the Start Date field to: 02-08-2010.

# Change the End Date field to: 09-08-2010.

# Select the Period Breakdown: Day (can also be week or month).

# Select the format you wish to view the report in and click on the 'Run Report' button to generate the report.

!totalpaymentsreport.png!

*Ageing Balance Detail Report:*

The easiest way to get a list of overdue invoices is by running the 'Ageing Balance Detail' report. This report will list the invoices that are overdue at the time you are running the report. If you need a list of overdue invoices for a different date, you will need to configure your own report based on the Invoices report.

# Click on Reports, and then click on Invoice Reports.

# Select: Ageing Balance Detail. 

# Select the format you wish to view the report in and click on the 'Run Report' button.

!ageingbalancedetail.png!

*Product Subscribers:*

Let's count how many users are subscribed to a particular product. For example: for the fictitious company *Trend* is in the business of selling advertisement on the net. The item ID 232 represents a banner. You can find out the ID of any of your products be clicking on the Products link. The ID is listed beneath the product's name.

# Click on Reports and then on Order Reports. 

# Click on Product Subscribers. The report and its parameters will appear on the right hand side of your screen.

# Enter the product ID into the Product ID field. In this example it is: 232.

# Select the format you wish to view the report in, and click on the 'Run Report' button. 

!productsubscribers.png!








h1. CHAPTER 14: SECURITY
h2. Overview
Security is a very important aspect in *j*Billing, especially because this system is a billing system. Within it you have all of your customer's information: contact, credit cards, purchasing behaviour, etc.

It is very important to look at security as an area that needs to be addressed from a number of different fronts: 
* Your network.
* Access to the server that is running *j*billing. 
* The database that is supporting *j*billing.

For example: if you are running on a secure operating system such as Linux, it will be very difficult for someone to gain access to it without a password. Yet, it is not a good idea to go ahead and install Linux, only to use it with all the parameters out of the box. You need to configure its many security options, like the firewall. Closing unneeded ports to the outside and shutting down services that are not required are just some of the tasks that relate to securing your server.

The same applies to your database. A robust data base has built-in security that, when used properly, give you a good degree of security on the data stored there.

This is why *j*billing is mostly focused on those areas. No matter how secure your OS and database are, if the application is not secure it would mean unauthorized access to the billing system.

h3. Credit Cards
Credit card information: number, names, etc, is one of the most sensitive types of information that *j*billing will hold. Thus, it can be stored in the database with encryption. This would prevent (or at least, make it more difficult) someone gaining access to your database from taking your customer's credit card numbers.

*Encryption*

Encryption is done by using a secret key. This key helps to scramble the name and number of a credit card so it gets stored in an non-readable way in the database.

The key is stored in the jbilling.properties file, under the property 'credit_card_password'. Make sure you change the default value to a rather lengthy, and random string. Do *not* use readable words.

Because a key is involved in the encryption and decryption process, it is very important to secure the jbilling.properties files well. Use your operating system features to make sure that only those authorized can read this file.

{note}
Please Note: with UNIX based system, it is a good idea to make jbilling.properties readable, only to root with permissions '440'.
{note}

The next step is to enable credit card encryption. This is done through another property in the file jbilling.properties. If 'credit_card_secure' is 'true', then all the names and numbers will be stored encrypted. If is 'false', they will be stored in plain, readable text.

{note}
Please Note: this property *must* be set when you are installing *j*billing, *before* any data has been entered in the system. Once you have credit cards stored in the database, you cannot change the 'credit_card_secure' property. The reason for this is because some data will be already be stored (encrypted or not), and when you change the property, the system will not be able to understand the data. It will expect the data to be either encrypted or plain text, when in fact it is stored the other way).
{note}

*Hiding*

Encrypting the data in the database is important, but that does not prevent users from seeing credit card information. A user with role of  'clerk' or higher can see the credit card information of all the customers in the system. Additionally, a customer can see their own credit card information which is a problem if someone else figures out the customer's password to login to *j*billing.

You can prevent any potential problems by making all the credit card numbers 'masked' so that only the last four digits are displayed to any user. To enable this feature in *j*Billing, you need to configure a preference. In this case, the preference is number 37, and the value needs to be changed to '1'. See Appendix A: Preferences for more information.

Setting up this preference also tells the system to hide the credit card numbers from the log files generated by the system, as well as in API calls to retrieve user information.

Combining this feature with the credit card encryption (and, most important, a secure operating system, database and network), will make *j*billing a very secure billing system where you can safely store your customer's credit card information.

h3. Password Management

A user password is the most important security feature to prevent unauthorized access to the system. There are several security features built-in *j*billing to help keep passwords secret to their owners.

{note}
Please Note: if your *j*billing setup is such that you do not want external users to access it (including customers), take advantage of a firewall to block connections coming from the Internet.
{note}

*Requirements*

A password needs to comply with a few requirements to be accepted by *j*billing:

* It has to be at least six characters long.
* It needs to contain both numbers and letters.
* It cannot be the same as any previous password for this user for the last two years (applies only when changing the password, not when creating a new user).
* It cannot be the same as any field from the contact information (For example: first name).

*Encryption*

Passwords can be stored encrypted in the database. Since passwords do not need to be shown at any time, the encryption method is a 'one-way' encryption: once a password is encrypted, it cannot be decrypted. This works because when a user tries to login, the entered password is encrypted and in this form compared with the one in the database (which is also encrypted). If they are the same, the authentication is successful.

{note}
Please Note: these requirements are implemented in *j*Billing by using 'validator'. You could change which validators are applied to a new password by changing the file 'validation.xml' in the source distribution of *j*Billing. 
{note}

In *j*billing, the password of roles above customer are always encrypted, you do not need to do anything for this to happen.

Customer's passwords are optionally encrypted. You can enable it by using the property: password_encrypt_all in jbilling.properties. If 'true' all the passwords will be encrypted. Otherwise, only those of users with roles *above* customer (clerks, administrators, etc) will be encrypted.

Why would you want the customer's password to be stored in plain-text? Having encrypted information in the database has its drawbacks. 

For example: you won't be able to tell a customer what their password is (although you can change it and tell them their new password). The feature to retrieve passwords does not work if the password are stored encrypted. The customer would simply receive the password encrypted in an email. This would not be helpful to the customer.

*Limiting Retries*

How many times do you allow a user to enter the wrong password in a row? A typical way to figure out someone's password is to simply try. If done in an automated way, this has a chance to be successful, compromising the user's account.

To prevent this, you can configure *j*billing to lock a user out if they try too many times to login. You can do this by using *j*billing preference: 39. If it is 0, then the feature is disabled an a user has unlimited attempts to login. If the value is set to a number greater than 0, then that number is the number of times that your users can attempt to login. To learn how to change the value of a *j*billing preference, please refer to Appendix A: Preferences.

If the limit of retires is reached, the account is locked-out by changing its password to the value in the property 'lockout_password' in jbilling.properties. Make sure to change this property from its default and set it as a long, random string of up to 20 characters.

*Expiration*

A good way to enhance the security of password is by making them expire. When the password expires, the user is forced to change it. This enforces the good practice of periodically changing a password, but it comes at a price. People usually remember a few set of passwords, and by forcing users to change them often leads to more occurrences of forgotten passwords.

Thus, password expiration is optional in *j*billing, and can be activated or deactivated at any time. You will be using preference: 40 for this. Set the value to 0 if you do not want your passwords to expire. This is also the default value. 

If you want to enable password expiration, set the value of the preference to a number higher than 0. The value will be the number of days the password is valid for. Past that date, the password is expired and needs to be changed.

To learn how to setup preferences in *j*billing, refer to Appendix A: Preferences.

h3. Securing jBilling with SSL

You would only want to use SSL when your users (customers or administrator) access *j*billing using the Internet. If all the access to *j*billing is done in a local network (LAN), then SSL is of little use.

The SSL protocol allows applications to communicate across a network in a way designed to prevent eavesdropping, tampering, and message forgery. SSL provides endpoint authentication and communications privacy over the Internet using cryptography.

*j*billing does not implement or deal with SSL directly. Instead, it relies on Tomcat to do this, since it is the component that takes on serving the web pages of the jbilling webbased graphic user interface. Therefore, it is mostly Tomcat that you need to configure to use SSL.

The documentation on how to configure tomcat is located [here|http://tomcat.apache.org/tomcat-3.3-doc/tomcat-ssl-howto.html]

Let's go over the main points:

* You need to have a key. You can generate it yourself, but the browsers will give a warning. Otherwise, you can buy one from a certificate authority.
* Once you have a key (which is just a file), you need to edit the file server.xml located in jbilling\server\default\deploy\jbossweb-tomcat50.sar and change:
# Uncomment the SSL section
# Update the location and name of the key store
# Update the password of the key store

Once you have the ability to establish a secure connection with *j*billing, you will want to avoid anyone from having unsecured sessions. You can easily configure *j*billing so it does not allow unsecured connections by having the property force_https in the jbilling.properties file set to 'true':

redirect all unsecured requests (http port 80) to SSL (https port 443)
force_https=true

When this property is 'true', *j*billing will verify that every requests starts with 'https' rather than 'http'. If an unsecured (http) request is detected, it is forwarded as 'https'.






h1. APPENDIX A: PREFERENCES

h2. Overview

Preferences are used to modify the behaviour of a *j*Billing module, and can be set at the company level. This means that if you are running several companies in a single *j*Billing installation, each of them can have their own set of preferences.

If you want to change the grace period of the ageing process, you will simply click on Configuration, and then Ageing. You will enter the value that you want in the 'Grace period' field. In this case, you don't need to know that it is a preference that you are dealing with.

However, there are a number of preferences that are not exposed in the GUI (some people in *j*Billing call these 'hidden features', because until this document was released it was very difficult to know and take advantage of them).

You can access the Preferences by clicking on Configuration. You will be automatically redirected to the list of preferences. You can click on a preference to make any desired changes to its value.  

!preferencevalues.png!

The following is a complete list of preferences:

{table}
*Number*|*Name*|*Default Value*|*Description*
1 | This preference is obsolete | n/a | n/a
2 | This preference is obsolete | n/a | n/a
3 | This preference is obsolete | n/a | n/a
4 | Grace Period | none | This preference is part of the ageing component and is editable through the GUI. See the System section of this documentation.
5 | Partner percentage rate | none | This preference is part of the partner component and is editable through the GUI. See the Partner section of this documentation.
6 | Partner referral fee | none | This preference is part of the partner component and is editable through the GUI. See the Partner section of this documentation.
7 | Partner one type payout | none | This is part of the partner component and is editable through the GUI. See the Partner section of this documentation.
8 | Partner period unit payout | none | This is part of the partner component and is editable through the GUI. See the Partner section of this documentation.
9 | Partner period value payout | none | This is part of the partner component and is editable through the GUI. See the Partner section of this documentation.
10 | Partner automatic payment | none | This is part of the partner component and is editable through the GUI. See the Partner section of the documentation.
11 | User in charge of partners | none | This is part of the partner component and is editable through the GUI. See the Partner section of the documentation.
12 | Partner fee currency | none | This is part of the partner component and is editable through the GUI. See the Partner section of the documentation. 
13 | Self delivery of paper invoices | none | This is part of the branding component and is editable through the GUI. See the System section of this documentation.
14 | Include customer notes in invoice | none | This is part of the notifications component and is editable through the GUI. See the Notifications section of the documentation. 
15 | Days before expiration for order notification | none | This is part of the notifications component and is editable through the GUI. See the Notifications section of the documentation.
16 | Days before expiration for order notification 2 | none | This is part of the notifications component and is editable through the GUI. See the Notification section of the document.
17 | Days before expiration for order notification 3 | none | This is part of the notifications component and is editable through the GUI. See the notifications section of the documentation. 
18 | Invoice number prefix | none | This part of the invoices component and is editable through the GUI. See the Invoices section of the documentation. 
19 | Next invoice number | none | This is part of the invoices component and is editable through the GUI. See the invoices section of this documentation.
20 | Manual invoice deletion | 1 | If it is not possible to delete invoices or not. A '1' would allow this to be done (by users with the right role or permission). Otherwise the option won't be available to any user.
21 | Use invoice reminders | 0 | This is part of the notifications component and is editable through the GUI. See the notifications section of the documentation.
22 | Number of days after the invoice generation for... | none | This is part of the notifications component and is editable through the GUI. See the Notifications section of the documentation.
23 | Number of days for next reminder | none | This is part of the notifications component and is editable through the GUI. See the notifications section of the documentation.
24 | Data Fattura Fine Mese | 0 | Only applicable to Italian users.
25 | Use overdue penalties (interest) | 0 | If set to '1', the batch process that follows the billing process will go over overdue invoices calculating interests. This preference is only a switch (on/off), the actual calculations (if this preference is '1') will happen in a plug-in.
26 | This preference is obsolete | n/a | n/a
27 | Use order anticipation | 0 | If to use 'order anticipation' for the invoice generation. If set to '1', a new field is considered for orders that indicates a number of months to invoice in advance. This has to be configured along with the right plug-in: @OrderFilterAnticipatedTask@
28 | PayPal account | none | The account to use with PayPal.
29 | PayPal button URL | http://www.paypal.com/en_US/I/btn/x-click-but6.gif | A URL where the graphic of the PayPal button is. The button is displayed to customers when they are about to pay. The default is usually the best option, except when other languages are needed.
30 | URL for HTTP callback | none | This is part of the ageing component and is editable through the GUI. See the System section of the documentation.
31 | Use continuous invoice dates | 2000-01-01 | If this preference is used, the system will make sure that all your invoices have their dates in an incremental way. Any invoice with a greater 'ID' will also have a greater (or equal) date. In other words, a new invoice cannot have an earlier date than an existing (older) invoice. To use this preference, set it as a string with the date where to start.
32 | Attach PDF invoice to email notification | 0 | If '1', all the invoice emails will have as an attachment the PDF version of the invoice. 
33 | Force one order per invoice | 0 | If set to '1', the system will show the field 'Include in separate invoice'. This is a flag that if set, will force the order to be included in one invoice, preventing it from being added with many other orders in the same invoice. 
34 | This preference is obsolete | n/a | n/a
35 | Add order ID to invoice lines | 0 | If set to '1', the ID of the order will be added as part of the text in the description of the resulting invoice line. This can help to easily track which exact orders are responsible for a line in an invoice, considering that many orders can be included in a single invoice. 
36 | Allow customers to edit own contact information | 1 | If to allow customers to edit their own contact information when they login to the *j*Billing GUI.
37 | Hide (mask) credit card numbers | 0 | If '1', the system will never show a complete credit card number, not even to administrator users or in log files. 
38 | Link ageing ID to subscription status | 1 | If '1', the system will change the ageing status of a user when the subscription status changes.
39 | Lock-out user on failed login attempts | 0 | If greater than zero, the system will change the password of a user if they fail to login after a number of retries. This number is the value of the preference. The password will be changed to the value of lockout_password in the file jbilling.properties.
40 | Expire user passwords after days | 0 | If greater than zero, it represents the number of days that a password is expired and the user is forced to change it. 
41 | Use main-subscription orders | 0 | If '1', then allow the usage of the 'main subscription' flag for orders. This flag is read only by the mediation process when determining where to place charges coming from events. 
42 | Use pro-rating | 0 | If '1' your company will be using pro-rating to allow invoicing of fractions of a period. The 'cycle' attribute of orders is displayed. Note that you need to configure the corresponding plug-ins for this feature to be fully functional. 
43 | Use payment blacklist | 0 | If the payment blacklist feature is used, this is set to the id of the configuration of the PaymentFilterTask plug-in. See the Blacklist section of the documentation.
44 | Allow negative payments | 0 | If '1', then negative payments (credits) are allowed to be sent to payment processors. 
45 | Delay negative invoice payments | 0 | If '1', then invoices created with a negative amount during the billing process have their payments delayed, causing them to be carried over to the next invoice. Invoices that have had negative balances from other invoices transferred to them are allowed to immediately make a negative payment (credit) if needed. Preference 44 & 46 usually also enabled.'
46 | Allow invoices without orders | 0 | If '1', allows invoices with negative balances to generate a new invoice that isn't composed of any orders, so that their balances will always get carried over to a new invoice for the credits to take place. Preference 44 & 45 usually also enabled. 
47 | Last read mediation record id | 0 | Id of the last record read by the mediation process. This is used to determine what records are 'new' and need to be read.
48 | Use provisioning | 0 | Set to '1' to allow the use or provisioning. Set to '0' to disable. 
49 | Automatic customer recharge threshold | 0 | The threshold for automatic payments. Pre-paid users with an automatic recharge value set will generate an automatic payment whenever the account balance falls below this threshold. Note that you need to configure the AutoRechargeTask plug-in for this feature to be fully functional. 
{table}

{note}
Please Note: all preferences have a default value. This means that your company does not need to have an explicit value in the table preference to set every preference. If a row for that preference number does not exist in the table preference, then the default value is taken. 
{note}


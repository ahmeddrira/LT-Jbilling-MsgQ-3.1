package ValidatePurchaseRules

#import 
import com.sapienter.jbilling.server.item.PricingField;
import com.sapienter.jbilling.server.item.db.ItemDTO;
import com.sapienter.jbilling.server.item.tasks.Subscription;
import com.sapienter.jbilling.server.order.db.OrderLineDTO;
import com.sapienter.jbilling.server.user.ValidatePurchaseWS;
import com.sapienter.jbilling.server.user.db.UserDTO;

#globals
global com.sapienter.jbilling.server.user.tasks.RulesValidatePurchaseTask$ValidatePurchase validatePurchase;

rule "Max 3 lemonades"
    when
        // lemonade, item id 1
        ItemDTO( internalNumber == "DP-1" ) 
        // subscribed to plan with hard limit
        Subscription( itemId == 2 ) 
        // current number of lemonades
        Subscription( itemId == 1, $quantityAlready : quantity ) 
        $result : ValidatePurchaseWS( authorized == true, $quantityAvailable : quantity )
        // no more than 3 lemonades
        eval( $quantityAlready + $quantityAvailable > 3 )
    then
        $result.setQuantity(3 - $quantityAlready);
        validatePurchase.addMessage("No more than 3 lemonades are allowed.");
        update($result);
end

rule "Authorization check"
    when
        $result : ValidatePurchaseWS( authorized == true, quantity <= 0.0 )
    then
        $result.setAuthorized(false);
        $result.setQuantity(0.0);
end

rule "Max 200 coffees for current order"
    when
        // coffee, item id 3
        ItemDTO( internalNumber == "DP-3" )
        // current number of coffees
        OrderLineDTO( itemId == 3, $quantityAlready : quantity )
        $result : ValidatePurchaseWS(authorized == true, $quantityAvailable : quantity )
        // no more than 20 coffees
        eval( $quantityAlready + $quantityAvailable > 20 )
    then
        $result.setQuantity(20 - $quantityAlready);
        validatePurchase.addMessage("No more than 20 coffees are allowed.");
        update($result);
end

rule "Throw exception"
    when
        PricingField(name == "fail")
    then
        throw new RuntimeException("Throw exception rule");
end

package ItemsRules3

#imports
import com.sapienter.jbilling.server.item.PricingField
import com.sapienter.jbilling.server.mediation.task.MediationResult
import com.sapienter.jbilling.server.item.db.ItemDTO
import com.sapienter.jbilling.server.order.db.OrderLineDTO;
import com.sapienter.jbilling.server.order.db.OrderLineDAS;
import com.sapienter.jbilling.server.order.db.OrderDTO;
import com.sapienter.jbilling.server.item.tasks.SubscriptionResult
import com.sapienter.jbilling.server.order.OrderLineBL;
import com.sapienter.jbilling.server.order.OrderBL;
import java.math.BigDecimal;
import java.util.List;
import org.apache.log4j.Logger;

# globals
global org.apache.log4j.Logger LOG;

function List getOrderLines(Integer userId, Integer itemId) {
    return new OrderLineDAS().findByUserItem(userId, itemId);
}


rule "persistence control"
salience 65000 # run first
no-loop        # run once
    when
        # TODO: need a better way to control persistence; gui item management persist = false, mediation persist = true
        # no mediation result, assume that we're not operating as part
        # of a mediation process, but as normal GUI interaction
        not( exists( MediationResult( ) ) )
    then
        insert( new MediationResult("item management", false) );
        LOG.debug("Set persistence control to false, item rules running from GUI");
end

rule "1000 minutes included plan subscription"
dialect 'java'
salience 100 # run first
no-loop      # run once
    when
        $order : OrderDTO( )
        not( exists( SubscriptionResult( userId == $order.userId, itemId == 2702 ) ) )
    then
        LOG.debug("Checking subscription to item 2702 for user " + $order.getUserId());
        insert( new SubscriptionResult($order, 2702) ); 
end

rule "Lemon and Coffee discount"
	when
        $order : OrderDTO( )    # any order
        OrderLineDTO( itemId == 2) from $order.lines # Lemonade
        OrderLineDTO( itemId == 3) from $order.lines # Coffee
        # only if the discount is not already there
        # otherwise an infinite loop happens (the no-loop attribute would
        # have the same effect)
        not ( OrderLineDTO( itemId == 14) from $order.lines )

        # persistence
        $result : MediationResult( )
	then
        OrderLineBL.addItem($order, 14, $result.getPersist()); # 10% discount
        update($order);
end


rule "Lemonade Plan"
    when
        $order : OrderDTO( )    # any order
        $planLine : OrderLineDTO( itemId == 250) from $order.lines # Plan

        # persistence
        $result : MediationResult( )
    then
        $order.getLines().remove($planLine); # Plan is only for grouping
        OrderLineBL.addItem($order, 1, $result.getPersist()); # The monthly lemonade subscription
        update($order);
        # now add an new order
        OrderDTO newOrder = OrderBL.createAsWithLine($order, 251, 1.0);  # The setup fee
        newOrder.setOrderPeriodId(1); # It should be one time
        newOrder.setNotes("As part of plan. ");
        insert(newOrder);
end

rule "bundle lemonade plan - request item"
no-loop # run only once
salience 10 # run before the plan rules
	when
        $order : OrderDTO( orderPeriod.id == 1 )    # any one-time order
        OrderLineDTO( itemId == 2600) from $order.lines # Generic lemonade
	then
        List<OrderLineDTO> lines = getOrderLines($order.getUserId(), 1); #request item 1: the plan
        for (OrderLineDTO line: lines) {
            insert(line);
            LOG.debug("inserted for user " + $order.getUserId() + " new line on request " + line);
        }
end

rule "bundle lemonade plan - included units"
salience 0 # run after the request rule
	when
        $order : OrderDTO( orderPeriod.id == 1 )    # any one-time order
        $generic : OrderLineDTO( itemId == 2600) from $order.lines # Generic lemonade
		OrderLineDTO( itemId == 1, purchaseOrder.userId == $order.userId) # plan

        # persistence
        $result : MediationResult( )
	then
        $order.getLines().remove($generic); # remove the generic
        OrderLineBL.addItem($order, 2601, $result.getPersist()); # add the included in plan
        update($order);
        LOG.debug("removed the generic lemonade and added the included in plan");
end

rule "bundle lemonade plan - not included units"
salience 0 # run after the request rule
	when
        $order : OrderDTO( orderPeriod.id == 1 )    # any one-time order
        $generic : OrderLineDTO( itemId == 2600) from $order.lines # Generic lemonade
		not OrderLineDTO( itemId == 1, purchaseOrder.userId == $order.userId) # plan

        # persistence
        $result : MediationResult( )
	then
        $order.getLines().remove($generic); # remove the generic
        OrderLineBL.addItem($order, 2602, $result.getPersist()); # add the normal item
        update($order);
        LOG.debug("removed the generic lemonade and added the priced item");
end

rule "long distance 1000 minutes - included"
    when
        $order : OrderDTO( ) 
        SubscriptionResult( userId == $order.userId, itemId == 2702, subscribed == true )  # Plan

        $line : OrderLineDTO(itemId == 2800, $quantity : quantity ) from $order.lines      # Long Distance Call
        not( OrderLineDTO(itemId == 2801, quantity.intValue >= 1000 ) from $order.lines )  # Long Distance Call Included

        # persistence
        $result : MediationResult( )
    then
        $order.getLines().remove($line); # remove rated call
        OrderLineBL.addItem($order, 2801, $quantity, $result.getPersist()); # add as included

        update( $order );
end

rule "long distance 1000 minutes - excess"
    when
        $order : OrderDTO( )
        $line : OrderLineDTO(itemId == 2801, quantity.intValue > 1000, $quantity : quantity ) from $order.lines
        SubscriptionResult( userId == $order.userId, itemId == 2702, subscribed == true ) # Plan

        # persistence
        $result : MediationResult( )
    then
        # remove any excess "included" call items
        $line.setQuantity(new BigDecimal(1000)); # only the first 1000 is included
        OrderLineBL.addItem($order, 2800, $quantity.subtract(new BigDecimal(1000)), $result.getPersist());        

        update( $order );
end

rule "log call"
    when
        $order : OrderDTO( )
        $line : OrderLineDTO( itemId == 2800 ) from $order.lines
    then
        LOG.debug("Current call (2800) quantity: " + $line.getQuantity());
end

rule "log call included"
    when
        $order : OrderDTO( )
        $line : OrderLineDTO( itemId == 2801 ) from $order.lines
    then
        LOG.debug("Current call included (2801) quantity: " + $line.getQuantity());
end

rule 'rateOrder test1'
	dialect "java"
when
	$field : PricingField( name == "add" )
	$order  : OrderDTO( )
then
    for (OrderLineDTO line: $order.getLines()) {
        line.setPrice(line.getPrice().add(new BigDecimal($field.getDoubleValue())));
    }
end

rule 'rateOrder test2'
	dialect "java"
when
	$field : PricingField( name == "subtract" )
	$order  : OrderDTO( )
then
    for (OrderLineDTO line: $order.getLines()) {
        line.setPrice(line.getPrice().subtract(new BigDecimal( $field.getDoubleValue())));
    }
end
